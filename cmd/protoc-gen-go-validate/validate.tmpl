
import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	// "google.golang.org/protobuf/types/known/anypb"

	{{ range .Imports -}}
	{{- if .Alias -}}
	{{ .Alias }} "{{ .Path }}"
	{{ else }}
	"{{ .Path }}"
	{{- end }}
	{{- end }}
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

{{- if .NeedWellKnow.UUID }}
// define the regex for a UUID once up-front
var _uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

{{ template "uuid" . }}
{{ end }}

{{- $notExistValidateHost := true }}
{{- if .NeedWellKnow.Hostname }}
{{- $notExistValidateHost = false }}
{{ template "hostname" . }}
{{ end }}


{{- if .NeedWellKnow.Email }}
{{ template "email" . }}
{{- if $notExistValidateHost }}
{{ template "hostname" . }}
{{ end }}
{{ end }}

{{- $VErrName := JoinString .FileAliasName "ValidationError"}}
{{- $MErrName := JoinString .FileAliasName "MultiError"}}
// {{$VErrName}} is the validation error
// returned by .Validate if the designated constraints aren't met.
type {{$VErrName}} struct {
	field   string
	reason  string
	errCode int32
	cause   error
	key     bool
}

// Field function returns field value.
func (e {{$VErrName}}) Field() string { return e.field }

func (e {{$VErrName}}) Reason() string { return e.reason }

func (e {{$VErrName}}) Cause() error { return e.cause }

func (e {{$VErrName}}) Key() bool { return e.key }

func (e {{$VErrName}}) ErrorName() string { return "{{$VErrName}}" }

// Error satisfies the builtin error interface
func (e {{$VErrName}}) Error() string {
	if e.errCode != 0 {
		return errorx.New(e.errCode).Error()
	} else {
		cause := ""
		if e.cause != nil {
			cause = fmt.Sprintf(" | caused by: %v", e.cause)
		}

		key := ""
		if e.key {
			key = "key for "
		}

		msg := fmt.Sprintf("invalid %s .%s: %s%s", key, e.field, e.reason, cause)
		return errorx.CreateError(400, {{ .ErrCodeBegin }}, msg).Error()
	}
}

// {{$MErrName}} is an error wrapping multiple validation errors
// returned by .ValidateAll() if the designated constraints aren't met.
type {{$MErrName}} []error

// Error returns a concatenation of all the error messages it wraps.
func (m {{$MErrName}}) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m {{$MErrName}}) AllErrors() []error { return m }

{{ range .Messages }}

{{ if not .Ignored -}}
{{ if .Disabled -}}
	{{ cmt "Validate is disabled for " .TypeName ". This method will always return nil." }}
{{- else -}}
	{{ cmt "Validate checks the field values on " .TypeName " with the rules defined in the proto definition for this message. If any rules are violated, the first error encountered is returned, or nil if there are no violations." }}
{{- end -}}
func (m *{{ .TypeName }}) Validate() error {
	return m.validate(false)
}

{{ if .Disabled -}}
	{{ cmt "ValidateAll is disabled for " .TypeName ". This method will always return nil." }}
{{- else -}}
	{{ cmt "ValidateAll checks the field values on " .TypeName " with the rules defined in the proto definition for this message. If any rules are violated, the result is a list of violation errors wrapped in " .TypeName "{{$MErrName}}, or nil if none found." }}
{{- end -}}
func (m *{{ .TypeName }}) ValidateAll() error {
	return m.validate(true)
}

{{/* Unexported function to handle validation. If the need arises to add more exported functions, please consider the functional option approach outlined in protoc-gen-validate#47. */}}
func (m *{{ .TypeName }}) validate(all bool) error {
	{{ if .Disabled -}}
		return nil
	{{ else -}}
		if m == nil { return nil }

		var errors []error

		{{ range .NonOneOfFields }}
			{{ render .TmplName . }}
		{{ end }}

		{{ range $fieldName, $oneof := .RealOneOfs }}
			{{- if $oneof.Required }}
			oneof{{ $oneof.Name }}Present := false
			{{- end }}
			switch v := m.{{ $oneof.Name }}.(type) {
				{{- range $oneof.Fields }}
					case *{{ oneOfType .Field }}:
						if v == nil {
							err := {{$VErrName}}{
								field: "{{ $oneof.Name }}",
								reason: "oneof value cannot be a typed-nil",
							}
							if !all { return err }
							errors = append(errors, err)
						}
						{{- if $oneof.Required }}
						oneof{{ $oneof.Name }}Present = true
						{{- end }}
						{{ render .TmplName . }}
				{{- end }}
					default:
						_ = v // ensures v is used
			}
			{{- if $oneof.Required }}
			if !oneof{{ $oneof.Name }}Present {
				err := {{$VErrName}}{
					field: "{{ $oneof.Name }}",
					reason: "value is required",
				}
				if !all { return err }
				errors = append(errors, err)
			}
			{{- end }}
		{{- end }}

		{{ range .OptionalFields }}
			if m.{{ .Name }} != nil {
				{{ render .TmplName . }}
			}
		{{ end }}

		if len(errors) > 0 {
			return  {{$MErrName}}(errors)
		}

		return nil
	{{ end -}}
}

{{ range .Fields }}{{ $f := .Field }}
	{{ if has .Rules "In" }}{{ if .Rules.In }}
		var {{ lookup .Field "InLookup" }} = map[{{ inType .Field .Rules.In }}]struct{}{
			{{- range .Rules.In }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}

	{{ if has .Rules "NotIn" }}{{ if .Rules.NotIn }}
		var {{ lookup .Field "NotInLookup" }} = map[{{ inType .Field .Rules.NotIn }}]struct{}{
			{{- range .Rules.NotIn }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}

	{{ if has .Rules "Pattern"}}{{ if .Rules.Pattern }}
		var {{ lookup .Field "Pattern" }} = regexp.MustCompile({{ lit .Rules.GetPattern }})
	{{ end }}{{ end }}

	{{ if has .Rules "Items"}}{{ if .Rules.Items }}
	{{ if has .Rules.Items.GetString_ "Pattern" }} {{ if .Rules.Items.GetString_.Pattern }}
		var {{ lookup .Field "Pattern" }} = regexp.MustCompile({{ lit .Rules.Items.GetString_.GetPattern }})
	{{ end }}{{ end }}
	{{ end }}{{ end }}

	{{ if has .Rules "Items"}}{{ if .Rules.Items }}
	{{ if has .Rules.Items.GetString_ "In" }} {{ if .Rules.Items.GetString_.In }}
		var {{ lookup .Field "InLookup" }} = map[string]struct{}{
			{{- range .Rules.Items.GetString_.In }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ if has .Rules.Items.GetEnum "In" }} {{ if .Rules.Items.GetEnum.In }}
		var {{ lookup .Field "InLookup" }} = map[{{ inType .Field .Rules.Items.GetEnum.In }}]struct{}{
			{{- range .Rules.Items.GetEnum.In }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ if has .Rules.Items.GetAny "In" }} {{ if .Rules.Items.GetAny.In }}
		var {{ lookup .Field "InLookup" }} = map[string]struct{}{
			{{- range .Rules.Items.GetAny.In }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ end }}{{ end }}

	{{ if has .Rules "Items"}}{{ if .Rules.Items }}
	{{ if has .Rules.Items.GetString_ "NotIn" }} {{ if .Rules.Items.GetString_.NotIn }}
		var {{ lookup .Field "NotInLookup" }} = map[string]struct{}{
			{{- range .Rules.Items.GetString_.NotIn }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ if has .Rules.Items.GetEnum "NotIn" }} {{ if .Rules.Items.GetEnum.NotIn }}
		var {{ lookup .Field "NotInLookup" }} = map[{{ inType .Field .Rules.Items.GetEnum.NotIn }}]struct{}{
			{{- range .Rules.Items.GetEnum.NotIn }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ if has .Rules.Items.GetAny "NotIn" }} {{ if .Rules.Items.GetAny.NotIn }}
		var {{ lookup .Field "NotInLookup" }} = map[string]struct{}{
			{{- range .Rules.Items.GetAny.NotIn }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ end }}{{ end }}

	{{ if has .Rules "Keys"}}{{ if .Rules.Keys }}
	{{ if has .Rules.Keys.GetString_ "In" }} {{ if .Rules.Keys.GetString_.In }}
		var {{ lookup .Field "InLookup" }} = map[{{ inType .Field .Rules.Keys.GetString_.In }}]struct{}{
			{{- range .Rules.Keys.GetString_.In }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ if has .Rules.Keys.GetString_ "NotIn" }} {{ if .Rules.Keys.GetString_.NotIn }}
		var {{ lookup .Field "NotInLookup" }} = map[{{ inType .Field .Rules.Keys.GetString_.NotIn }}]struct{}{
			{{- range .Rules.Keys.GetString_.NotIn }}
				{{ inKey $f . }}: {},
			{{- end }}
		}
	{{ end }}{{ end }}
	{{ if has .Rules.Keys.GetString_ "Pattern" }} {{ if .Rules.Keys.GetString_.Pattern }}
		var {{ lookup .Field "Pattern" }} = regexp.MustCompile({{ lit .Rules.Keys.GetString_.GetPattern }})
	{{ end }}{{ end }}
	{{ end }}{{ end }}

	{{ if has .Rules "Values"}}{{ if .Rules.Values }}
	{{ if has .Rules.Values.GetString_ "Pattern" }} {{ if .Rules.Values.GetString_.Pattern }}
		var {{ lookup .Field "Pattern" }} = regexp.MustCompile({{ lit .Rules.Values.GetString_.GetPattern }})
	{{ end }}{{ end }}
	{{ end }}{{ end }}

{{ end }}
{{- end -}}
{{- end -}}
