// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v3.21.5
// source: cases/enums.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	//"google.golang.org/protobuf/types/known/anypb"

	other_package "github.com/ml444/gkit/cmd/protoc-gen-go-validate/tests/cases/other_package"

	sort1 "github.com/ml444/gkit/cmd/protoc-gen-go-validate/tests/cases/sort"

	yet_another_package "github.com/ml444/gkit/cmd/protoc-gen-go-validate/tests/cases/yet_another_package"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort

	_ = other_package.Embed_FooNumber(0)

	_ = sort1.Direction(0)

	_ = yet_another_package.Embed_BarNumber(0)
)

// Validate checks the field values on EnumConst with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumConst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumConst with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumConstMultiError, or nil
// if none found.
func (m *EnumConst) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumConst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 2 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal TWO",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumAliasConst with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumAliasConst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumAliasConst with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumAliasConstMultiError,
// or nil if none found.
func (m *EnumAliasConst) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumAliasConst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 2 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal C",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumDefined with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumDefined with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumDefinedMultiError, or
// nil if none found.
func (m *EnumDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := TestEnum_name[int32(m.GetVal())]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumAliasDefined with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnumAliasDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumAliasDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnumAliasDefinedMultiError, or nil if none found.
func (m *EnumAliasDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumAliasDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := TestEnumAlias_name[int32(m.GetVal())]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnumInMultiError, or nil if none found.
func (m *EnumIn) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _EnumIn_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [ZERO TWO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _EnumIn_Val_InLookup = map[TestEnum]struct{}{
	0: {},
	2: {},
}

// Validate checks the field values on EnumAliasIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumAliasIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumAliasIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumAliasInMultiError, or
// nil if none found.
func (m *EnumAliasIn) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumAliasIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _EnumAliasIn_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [A C]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _EnumAliasIn_Val_InLookup = map[TestEnumAlias]struct{}{
	0: {},
	2: {},
}

// Validate checks the field values on EnumNotIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumNotInMultiError, or nil
// if none found.
func (m *EnumNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _EnumNotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [ONE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _EnumNotIn_Val_NotInLookup = map[TestEnum]struct{}{
	1: {},
}

// Validate checks the field values on EnumAliasNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumAliasNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumAliasNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumAliasNotInMultiError,
// or nil if none found.
func (m *EnumAliasNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumAliasNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _EnumAliasNotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [B]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _EnumAliasNotIn_Val_NotInLookup = map[TestEnumAlias]struct{}{
	1: {},
}

// Validate checks the field values on EnumExternal with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumExternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumExternal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumExternalMultiError, or
// nil if none found.
func (m *EnumExternal) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumExternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := other_package.Embed_Enumerated_name[int32(m.GetVal())]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumExternal2 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumExternal2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumExternal2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumExternal2MultiError, or
// nil if none found.
func (m *EnumExternal2) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumExternal2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := other_package.Embed_DoubleEmbed_DoubleEnumerated_name[int32(m.GetVal())]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumExternal3 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumExternal3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumExternal3 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumExternal3MultiError, or
// nil if none found.
func (m *EnumExternal3) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumExternal3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _EnumExternal3_Foo_InLookup[m.GetFoo()]; !ok {
		err := ValidationError{
			field:  "Foo",
			reason: "value must be in list [ZERO TWO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _EnumExternal3_Bar_NotInLookup[m.GetBar()]; ok {
		err := ValidationError{
			field:  "Bar",
			reason: "value must not be in list [ONE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _EnumExternal3_Foo_InLookup = map[other_package.Embed_FooNumber]struct{}{
	0: {},
	2: {},
}

var _EnumExternal3_Bar_NotInLookup = map[yet_another_package.Embed_BarNumber]struct{}{
	1: {},
}

// Validate checks the field values on EnumExternal4 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumExternal4) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumExternal4 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumExternal4MultiError, or
// nil if none found.
func (m *EnumExternal4) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumExternal4) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSortDirection() != 1 {
		err := ValidationError{
			field:  "SortDirection",
			reason: "value must equal ASC",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedEnumDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedEnumDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEnumDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedEnumDefinedMultiError, or nil if none found.
func (m *RepeatedEnumDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEnumDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := TestEnum_name[int32(item)]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedExternalEnumDefined with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedExternalEnumDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedExternalEnumDefined with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedExternalEnumDefinedMultiError, or nil if none found.
func (m *RepeatedExternalEnumDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedExternalEnumDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := other_package.Embed_Enumerated_name[int32(item)]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedYetAnotherExternalEnumDefined
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RepeatedYetAnotherExternalEnumDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedYetAnotherExternalEnumDefined
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RepeatedYetAnotherExternalEnumDefinedMultiError, or nil if none found.
func (m *RepeatedYetAnotherExternalEnumDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedYetAnotherExternalEnumDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := yet_another_package.Embed_Enumerated_name[int32(item)]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedEnumExternal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedEnumExternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEnumExternal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedEnumExternalMultiError, or nil if none found.
func (m *RepeatedEnumExternal) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEnumExternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFoo() {
		_, _ = idx, item

		if _, ok := _RepeatedEnumExternal_Foo_InLookup[item]; !ok {
			err := ValidationError{
				field:  "Foo",
				reason: "value must be in list [ZERO TWO]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetBar() {
		_, _ = idx, item

		if _, ok := _RepeatedEnumExternal_Bar_NotInLookup[item]; ok {
			err := ValidationError{
				field:  "Bar",
				reason: "value must not be in list [ONE]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedEnumExternal_Foo_InLookup = map[other_package.Embed_FooNumber]struct{}{
	0: {},
	2: {},
}

var _RepeatedEnumExternal_Bar_NotInLookup = map[yet_another_package.Embed_BarNumber]struct{}{
	1: {},
}

// Validate checks the field values on MapEnumDefined with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapEnumDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapEnumDefined with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapEnumDefinedMultiError,
// or nil if none found.
func (m *MapEnumDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *MapEnumDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			// no validation rules for Val

			if _, ok := TestEnum_name[int32(val)]; !ok {
				err := ValidationError{
					field:  "Val",
					reason: "value must be one of the defined enum values",
					key:    true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapExternalEnumDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MapExternalEnumDefined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapExternalEnumDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MapExternalEnumDefinedMultiError, or nil if none found.
func (m *MapExternalEnumDefined) ValidateAll() error {
	return m.validate(true)
}

func (m *MapExternalEnumDefined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			// no validation rules for Val

			if _, ok := other_package.Embed_Enumerated_name[int32(val)]; !ok {
				err := ValidationError{
					field:  "Val",
					reason: "value must be one of the defined enum values",
					key:    true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on EnumInsideOneOf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnumInsideOneOf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumInsideOneOf with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnumInsideOneOfMultiError, or nil if none found.
func (m *EnumInsideOneOf) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumInsideOneOf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Bar.(type) {
	case *EnumInsideOneOf_Val21:
		if v == nil {
			err := ValidationError{
				field:  "Bar",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if _, ok := _EnumInsideOneOf_Val21_NotInLookup[m.GetVal21()]; ok {
			err := ValidationError{
				field:  "Val21",
				reason: "value must not be in list [ZERO]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if _, ok := TestEnum_name[int32(m.GetVal21())]; !ok {
			err := ValidationError{
				field:  "Val21",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	switch v := m.Foo.(type) {
	case *EnumInsideOneOf_Val:
		if v == nil {
			err := ValidationError{
				field:  "Foo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if _, ok := TestEnum_name[int32(m.GetVal())]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _EnumInsideOneOf_Val21_NotInLookup = map[TestEnum]struct{}{
	0: {},
}
