// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v3.21.5
// source: cases/numbers.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
	//"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FloatConst with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatConst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatConst with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatConstMultiError, or
// nil if none found.
func (m *FloatConst) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatConst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1.23 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1.23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FloatInMultiError, or nil if none found.
func (m *FloatIn) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _FloatIn_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [4.56 7.89]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _FloatIn_Val_InLookup = map[float32]struct{}{
	4.56: {},
	7.89: {},
}

// Validate checks the field values on FloatNotIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatNotInMultiError, or
// nil if none found.
func (m *FloatNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _FloatNotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _FloatNotIn_Val_NotInLookup = map[float32]struct{}{
	0: {},
}

// Validate checks the field values on FloatLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatLT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FloatLTMultiError, or nil if none found.
func (m *FloatLT) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatLTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatLTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatLTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatLTEMultiError, or nil
// if none found.
func (m *FloatLTE) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatLTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatGT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatGT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FloatGTMultiError, or nil if none found.
func (m *FloatGT) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatGTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatGTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatGTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatGTEMultiError, or nil
// if none found.
func (m *FloatGTE) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatGTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatGTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatGTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatGTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatGTLTMultiError, or nil
// if none found.
func (m *FloatGTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatGTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatExLTGTMultiError, or
// nil if none found.
func (m *FloatExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatGTELTEMultiError, or
// nil if none found.
func (m *FloatGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatExGTELTEMultiError, or
// nil if none found.
func (m *FloatExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > -128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (-128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on FloatIgnore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FloatIgnore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatIgnore with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FloatIgnoreMultiError, or
// nil if none found.
func (m *FloatIgnore) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatIgnore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val < 128 || val > 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be inside range [128, 256]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleConst with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleConst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleConst with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleConstMultiError, or
// nil if none found.
func (m *DoubleConst) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleConst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1.23 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1.23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleInMultiError, or nil
// if none found.
func (m *DoubleIn) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _DoubleIn_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [4.56 7.89]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _DoubleIn_Val_InLookup = map[float64]struct{}{
	4.56: {},
	7.89: {},
}

// Validate checks the field values on DoubleNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleNotInMultiError, or
// nil if none found.
func (m *DoubleNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _DoubleNotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _DoubleNotIn_Val_NotInLookup = map[float64]struct{}{
	0: {},
}

// Validate checks the field values on DoubleLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleLTMultiError, or nil
// if none found.
func (m *DoubleLT) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleLTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleLTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleLTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleLTEMultiError, or nil
// if none found.
func (m *DoubleLTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleLTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleGT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleGT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleGTMultiError, or nil
// if none found.
func (m *DoubleGT) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleGTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleGTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleGTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleGTEMultiError, or nil
// if none found.
func (m *DoubleGTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleGTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleGTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleGTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleGTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleGTLTMultiError, or
// nil if none found.
func (m *DoubleGTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleGTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleExLTGTMultiError, or
// nil if none found.
func (m *DoubleExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleGTELTEMultiError, or
// nil if none found.
func (m *DoubleGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleExGTELTEMultiError,
// or nil if none found.
func (m *DoubleExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > -128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (-128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DoubleIgnore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DoubleIgnore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleIgnore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DoubleIgnoreMultiError, or
// nil if none found.
func (m *DoubleIgnore) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleIgnore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > 128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32Const with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32ConstMultiError, or
// nil if none found.
func (m *Int32Const) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32In with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int32InMultiError, or nil if none found.
func (m *Int32In) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Int32In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Int32In_Val_InLookup = map[int32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Int32NotIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32NotInMultiError, or
// nil if none found.
func (m *Int32NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Int32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Int32NotIn_Val_NotInLookup = map[int32]struct{}{
	0: {},
}

// Validate checks the field values on Int32LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32LT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int32LTMultiError, or nil if none found.
func (m *Int32LT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32LTEMultiError, or nil
// if none found.
func (m *Int32LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32GT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int32GTMultiError, or nil if none found.
func (m *Int32GT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32GTEMultiError, or nil
// if none found.
func (m *Int32GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32GTLTMultiError, or nil
// if none found.
func (m *Int32GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32ExLTGTMultiError, or
// nil if none found.
func (m *Int32ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32GTELTEMultiError, or
// nil if none found.
func (m *Int32GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32ExGTELTEMultiError, or
// nil if none found.
func (m *Int32ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int32Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int32IgnoreMultiError, or
// nil if none found.
func (m *Int32Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > -128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (-128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64Const with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64ConstMultiError, or
// nil if none found.
func (m *Int64Const) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64In with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int64InMultiError, or nil if none found.
func (m *Int64In) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Int64In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Int64In_Val_InLookup = map[int64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Int64NotIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64NotInMultiError, or
// nil if none found.
func (m *Int64NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Int64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Int64NotIn_Val_NotInLookup = map[int64]struct{}{
	0: {},
}

// Validate checks the field values on Int64LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64LT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int64LTMultiError, or nil if none found.
func (m *Int64LT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64LTEMultiError, or nil
// if none found.
func (m *Int64LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64GT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int64GTMultiError, or nil if none found.
func (m *Int64GT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64GTEMultiError, or nil
// if none found.
func (m *Int64GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64GTLTMultiError, or nil
// if none found.
func (m *Int64GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64ExLTGTMultiError, or
// nil if none found.
func (m *Int64ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64GTELTEMultiError, or
// nil if none found.
func (m *Int64GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64ExGTELTEMultiError, or
// nil if none found.
func (m *Int64ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64IgnoreMultiError, or
// nil if none found.
func (m *Int64Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > -128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (-128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32ConstMultiError, or
// nil if none found.
func (m *UInt32Const) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32InMultiError, or nil
// if none found.
func (m *UInt32In) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UInt32In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _UInt32In_Val_InLookup = map[uint32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on UInt32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32NotInMultiError, or
// nil if none found.
func (m *UInt32NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UInt32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _UInt32NotIn_Val_NotInLookup = map[uint32]struct{}{
	0: {},
}

// Validate checks the field values on UInt32LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32LTMultiError, or nil
// if none found.
func (m *UInt32LT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 5 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32LTEMultiError, or nil
// if none found.
func (m *UInt32LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32GTMultiError, or nil
// if none found.
func (m *UInt32GT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32GTEMultiError, or nil
// if none found.
func (m *UInt32GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32GTLTMultiError, or
// nil if none found.
func (m *UInt32GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 5 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32ExLTGTMultiError, or
// nil if none found.
func (m *UInt32ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 5 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32GTELTEMultiError, or
// nil if none found.
func (m *UInt32GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32ExGTELTEMultiError,
// or nil if none found.
func (m *UInt32ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt32Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt32Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt32Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt32IgnoreMultiError, or
// nil if none found.
func (m *UInt32Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt32Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > 128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64ConstMultiError, or
// nil if none found.
func (m *UInt64Const) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64InMultiError, or nil
// if none found.
func (m *UInt64In) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UInt64In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _UInt64In_Val_InLookup = map[uint64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on UInt64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64NotInMultiError, or
// nil if none found.
func (m *UInt64NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UInt64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _UInt64NotIn_Val_NotInLookup = map[uint64]struct{}{
	0: {},
}

// Validate checks the field values on UInt64LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64LTMultiError, or nil
// if none found.
func (m *UInt64LT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 5 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64LTEMultiError, or nil
// if none found.
func (m *UInt64LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64GTMultiError, or nil
// if none found.
func (m *UInt64GT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64GTEMultiError, or nil
// if none found.
func (m *UInt64GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64GTLTMultiError, or
// nil if none found.
func (m *UInt64GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 5 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64ExLTGTMultiError, or
// nil if none found.
func (m *UInt64ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 5 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64GTELTEMultiError, or
// nil if none found.
func (m *UInt64GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64ExGTELTEMultiError,
// or nil if none found.
func (m *UInt64ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on UInt64Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UInt64Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UInt64Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UInt64IgnoreMultiError, or
// nil if none found.
func (m *UInt64Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *UInt64Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > 128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32ConstMultiError, or
// nil if none found.
func (m *SInt32Const) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32InMultiError, or nil
// if none found.
func (m *SInt32In) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SInt32In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SInt32In_Val_InLookup = map[int32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SInt32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32NotInMultiError, or
// nil if none found.
func (m *SInt32NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SInt32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SInt32NotIn_Val_NotInLookup = map[int32]struct{}{
	0: {},
}

// Validate checks the field values on SInt32LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32LTMultiError, or nil
// if none found.
func (m *SInt32LT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32LTEMultiError, or nil
// if none found.
func (m *SInt32LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32GTMultiError, or nil
// if none found.
func (m *SInt32GT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32GTEMultiError, or nil
// if none found.
func (m *SInt32GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32GTLTMultiError, or
// nil if none found.
func (m *SInt32GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32ExLTGTMultiError, or
// nil if none found.
func (m *SInt32ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32GTELTEMultiError, or
// nil if none found.
func (m *SInt32GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32ExGTELTEMultiError,
// or nil if none found.
func (m *SInt32ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt32Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt32Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt32Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt32IgnoreMultiError, or
// nil if none found.
func (m *SInt32Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt32Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > -128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (-128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64ConstMultiError, or
// nil if none found.
func (m *SInt64Const) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64InMultiError, or nil
// if none found.
func (m *SInt64In) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SInt64In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SInt64In_Val_InLookup = map[int64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SInt64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64NotInMultiError, or
// nil if none found.
func (m *SInt64NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SInt64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SInt64NotIn_Val_NotInLookup = map[int64]struct{}{
	0: {},
}

// Validate checks the field values on SInt64LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64LTMultiError, or nil
// if none found.
func (m *SInt64LT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64LTEMultiError, or nil
// if none found.
func (m *SInt64LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64GTMultiError, or nil
// if none found.
func (m *SInt64GT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64GTEMultiError, or nil
// if none found.
func (m *SInt64GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64GTLTMultiError, or
// nil if none found.
func (m *SInt64GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64ExLTGTMultiError, or
// nil if none found.
func (m *SInt64ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64GTELTEMultiError, or
// nil if none found.
func (m *SInt64GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64ExGTELTEMultiError,
// or nil if none found.
func (m *SInt64ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SInt64Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SInt64Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SInt64Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SInt64IgnoreMultiError, or
// nil if none found.
func (m *SInt64Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *SInt64Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > -128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (-128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32Const with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32ConstMultiError, or
// nil if none found.
func (m *Fixed32Const) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32InMultiError, or nil
// if none found.
func (m *Fixed32In) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Fixed32In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Fixed32In_Val_InLookup = map[uint32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Fixed32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32NotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32NotInMultiError, or
// nil if none found.
func (m *Fixed32NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Fixed32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Fixed32NotIn_Val_NotInLookup = map[uint32]struct{}{
	0: {},
}

// Validate checks the field values on Fixed32LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32LTMultiError, or nil
// if none found.
func (m *Fixed32LT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 5 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32LTEMultiError, or
// nil if none found.
func (m *Fixed32LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32GTMultiError, or nil
// if none found.
func (m *Fixed32GT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32GTEMultiError, or
// nil if none found.
func (m *Fixed32GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32GTLTMultiError, or
// nil if none found.
func (m *Fixed32GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 5 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32ExLTGTMultiError, or
// nil if none found.
func (m *Fixed32ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 5 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32GTELTEMultiError, or
// nil if none found.
func (m *Fixed32GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Fixed32ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32ExGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Fixed32ExGTELTEMultiError, or nil if none found.
func (m *Fixed32ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed32Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed32Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed32Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed32IgnoreMultiError, or
// nil if none found.
func (m *Fixed32Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed32Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > 128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64Const with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64ConstMultiError, or
// nil if none found.
func (m *Fixed64Const) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64InMultiError, or nil
// if none found.
func (m *Fixed64In) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Fixed64In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Fixed64In_Val_InLookup = map[uint64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Fixed64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64NotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64NotInMultiError, or
// nil if none found.
func (m *Fixed64NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Fixed64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _Fixed64NotIn_Val_NotInLookup = map[uint64]struct{}{
	0: {},
}

// Validate checks the field values on Fixed64LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64LTMultiError, or nil
// if none found.
func (m *Fixed64LT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 5 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64LTEMultiError, or
// nil if none found.
func (m *Fixed64LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64GTMultiError, or nil
// if none found.
func (m *Fixed64GT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64GTEMultiError, or
// nil if none found.
func (m *Fixed64GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64GTLTMultiError, or
// nil if none found.
func (m *Fixed64GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 5 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64ExLTGTMultiError, or
// nil if none found.
func (m *Fixed64ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 5 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64GTELTEMultiError, or
// nil if none found.
func (m *Fixed64GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Fixed64ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64ExGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Fixed64ExGTELTEMultiError, or nil if none found.
func (m *Fixed64ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Fixed64Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fixed64Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fixed64Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Fixed64IgnoreMultiError, or
// nil if none found.
func (m *Fixed64Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *Fixed64Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > 128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32Const with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32ConstMultiError, or
// nil if none found.
func (m *SFixed32Const) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32InMultiError, or
// nil if none found.
func (m *SFixed32In) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SFixed32In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SFixed32In_Val_InLookup = map[int32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SFixed32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32NotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32NotInMultiError, or
// nil if none found.
func (m *SFixed32NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SFixed32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SFixed32NotIn_Val_NotInLookup = map[int32]struct{}{
	0: {},
}

// Validate checks the field values on SFixed32LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32LTMultiError, or
// nil if none found.
func (m *SFixed32LT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32LTEMultiError, or
// nil if none found.
func (m *SFixed32LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32GTMultiError, or
// nil if none found.
func (m *SFixed32GT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32GTEMultiError, or
// nil if none found.
func (m *SFixed32GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32GTLT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32GTLTMultiError, or
// nil if none found.
func (m *SFixed32GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32ExLTGTMultiError,
// or nil if none found.
func (m *SFixed32ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32GTELTEMultiError,
// or nil if none found.
func (m *SFixed32GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SFixed32ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32ExGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SFixed32ExGTELTEMultiError, or nil if none found.
func (m *SFixed32ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed32Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed32Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed32Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed32IgnoreMultiError,
// or nil if none found.
func (m *SFixed32Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed32Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > -128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (-128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64Const with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64Const) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64Const with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64ConstMultiError, or
// nil if none found.
func (m *SFixed64Const) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64Const) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64In with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64In with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64InMultiError, or
// nil if none found.
func (m *SFixed64In) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SFixed64In_Val_InLookup[m.GetVal()]; !ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SFixed64In_Val_InLookup = map[int64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SFixed64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64NotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64NotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64NotInMultiError, or
// nil if none found.
func (m *SFixed64NotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64NotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SFixed64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		err := ValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _SFixed64NotIn_Val_NotInLookup = map[int64]struct{}{
	0: {},
}

// Validate checks the field values on SFixed64LT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64LT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64LT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64LTMultiError, or
// nil if none found.
func (m *SFixed64LT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64LT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() >= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64LTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64LTEMultiError, or
// nil if none found.
func (m *SFixed64LTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64LTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() > 64 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64GT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64GT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64GT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64GTMultiError, or
// nil if none found.
func (m *SFixed64GT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64GT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 16 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64GTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64GTEMultiError, or
// nil if none found.
func (m *SFixed64GTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64GTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() < 8 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64GTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64GTLT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64GTLTMultiError, or
// nil if none found.
func (m *SFixed64GTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64GTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val <= 0 || val >= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64ExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64ExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64ExLTGTMultiError,
// or nil if none found.
func (m *SFixed64ExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64ExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val >= 0 && val <= 10 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64GTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64GTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64GTELTEMultiError,
// or nil if none found.
func (m *SFixed64GTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64GTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val < 128 || val > 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SFixed64ExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64ExGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SFixed64ExGTELTEMultiError, or nil if none found.
func (m *SFixed64ExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64ExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetVal(); val > 128 && val < 256 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on SFixed64Ignore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SFixed64Ignore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SFixed64Ignore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SFixed64IgnoreMultiError,
// or nil if none found.
func (m *SFixed64Ignore) ValidateAll() error {
	return m.validate(true)
}

func (m *SFixed64Ignore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() != 0 {

		if val := m.GetVal(); val > -128 && val < 256 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be outside range (-128, 256)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on Int64LTEOptional with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Int64LTEOptional) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64LTEOptional with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Int64LTEOptionalMultiError, or nil if none found.
func (m *Int64LTEOptional) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64LTEOptional) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Val != nil {

		if m.GetVal() > 64 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be less than or equal to 64",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}
