// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v3.21.5
// source: cases/wkt_duration.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
	//"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DurationRequired with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DurationRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationRequired with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DurationRequiredMultiError, or nil if none found.
func (m *DurationRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() == nil {
		err := ValidationError{
			field:  "Val",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationConst with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationConst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationConst with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationConstMultiError, or
// nil if none found.
func (m *DurationConst) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationConst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			if dur != time.Duration(3*time.Second+0*time.Nanosecond) {
				err := ValidationError{
					field:  "Val",
					reason: "value must equal 3s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationInMultiError, or
// nil if none found.
func (m *DurationIn) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			if _, ok := _DurationIn_Val_InLookup[dur]; !ok {
				err := ValidationError{
					field:  "Val",
					reason: "value must be in list [seconds:1 nanos:1000]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _DurationIn_Val_InLookup = map[time.Duration]struct{}{
	1000000000: {},
	1000:       {},
}

// Validate checks the field values on DurationNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationNotInMultiError, or
// nil if none found.
func (m *DurationNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			if _, ok := _DurationNotIn_Val_NotInLookup[dur]; ok {
				err := ValidationError{
					field:  "Val",
					reason: "value must not be in list []",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _DurationNotIn_Val_NotInLookup = map[time.Duration]struct{}{
	0: {},
}

// Validate checks the field values on DurationLT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationLTMultiError, or
// nil if none found.
func (m *DurationLT) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur >= lt {
				err := ValidationError{
					field:  "Val",
					reason: "value must be less than 0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationLTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationLTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationLTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationLTEMultiError, or
// nil if none found.
func (m *DurationLTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationLTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Duration(1*time.Second + 0*time.Nanosecond)

			if dur > lte {
				err := ValidationError{
					field:  "Val",
					reason: "value must be less than or equal to 1s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationGT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationGT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationGTMultiError, or
// nil if none found.
func (m *DurationGT) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Duration(0*time.Second + 1000*time.Nanosecond)

			if dur <= gt {
				err := ValidationError{
					field:  "Val",
					reason: "value must be greater than 1Âµs",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationGTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationGTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationGTE with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationGTEMultiError, or
// nil if none found.
func (m *DurationGTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationGTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gte := time.Duration(0*time.Second + 1000000*time.Nanosecond)

			if dur < gte {
				err := ValidationError{
					field:  "Val",
					reason: "value must be greater than or equal to 1ms",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationGTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationGTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationGTLT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationGTLTMultiError, or
// nil if none found.
func (m *DurationGTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationGTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(1*time.Second + 0*time.Nanosecond)
			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt || dur >= lt {
				err := ValidationError{
					field:  "Val",
					reason: "value must be inside range (0s, 1s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationExLTGTMultiError,
// or nil if none found.
func (m *DurationExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(0*time.Second + 0*time.Nanosecond)
			gt := time.Duration(1*time.Second + 0*time.Nanosecond)

			if dur >= lt && dur <= gt {
				err := ValidationError{
					field:  "Val",
					reason: "value must be outside range [0s, 1s]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DurationGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationGTELTEMultiError,
// or nil if none found.
func (m *DurationGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Duration(3600*time.Second + 0*time.Nanosecond)
			gte := time.Duration(60*time.Second + 0*time.Nanosecond)

			if dur < gte || dur > lte {
				err := ValidationError{
					field:  "Val",
					reason: "value must be inside range [1m0s, 1h0m0s]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DurationExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationExGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DurationExGTELTEMultiError, or nil if none found.
func (m *DurationExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Duration(60*time.Second + 0*time.Nanosecond)
			gte := time.Duration(3600*time.Second + 0*time.Nanosecond)

			if dur > lte && dur < gte {
				err := ValidationError{
					field:  "Val",
					reason: "value must be outside range (1m0s, 1h0m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on DurationFieldWithOtherFields with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DurationFieldWithOtherFields) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DurationFieldWithOtherFields with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DurationFieldWithOtherFieldsMultiError, or nil if none found.
func (m *DurationFieldWithOtherFields) ValidateAll() error {
	return m.validate(true)
}

func (m *DurationFieldWithOtherFields) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetDurationVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "DurationVal",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Duration(1*time.Second + 0*time.Nanosecond)

			if dur > lte {
				err := ValidationError{
					field:  "DurationVal",
					reason: "value must be less than or equal to 1s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if m.GetIntVal() <= 16 {
		err := ValidationError{
			field:  "IntVal",
			reason: "value must be greater than 16",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}
