// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v4.25.0--rc2
// source: cases/messages.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	// "google.golang.org/protobuf/types/known/anypb"

	sort1 "github.com/ml444/gkit/cmd/protoc-gen-go-validate/tests/cases/sort"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TestMsgMultiError, or nil if none found.
func (m *TestMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *TestMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConst() != "foo" {
		err := ValidationError{
			field:   "Const",
			reason:  "value must equal foo",
			errCode: 0,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate is disabled for MessageDisabled. This method will always return nil.
func (m *MessageDisabled) Validate() error {
	return m.validate(false)
}

// ValidateAll is disabled for MessageDisabled. This method will always return nil.
func (m *MessageDisabled) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDisabled) validate(all bool) error {
	return nil
}

// Validate checks the field values on MessageCrossPackage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageCrossPackage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageCrossPackage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageCrossPackageMultiError, or nil if none found.
func (m *MessageCrossPackage) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageCrossPackage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() == nil {
		err := ValidationError{
			field:   "Val",
			reason:  "value is required",
			errCode: 0,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationError{
					field:   "Val",
					reason:  "embedded message failed validation",
					errCode: 0,
					cause:   err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationError{
					field:   "Val",
					reason:  "embedded message failed validation",
					errCode: 0,
					cause:   err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationError{
				field:   "Val",
				reason:  "embedded message failed validation",
				errCode: 0,
				cause:   err,
			}
		}
	}

	if _, ok := _MessageCrossPackage_Direction_InLookup[m.GetDirection()]; !ok {
		err := ValidationError{
			field:   "Direction",
			reason:  "value must be in list [ASC DESC]",
			errCode: 0,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _MessageCrossPackage_Direction_InLookup = map[sort1.Direction]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on MessageSkip with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageSkip) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageSkip with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageSkipMultiError, or
// nil if none found.
func (m *MessageSkip) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageSkip) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// skipping validation for Val

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MessageRequired with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRequired with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRequiredMultiError, or nil if none found.
func (m *MessageRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() == nil {
		err := ValidationError{
			field:   "Val",
			reason:  "value is required",
			errCode: 0,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationError{
					field:   "Val",
					reason:  "embedded message failed validation",
					errCode: 0,
					cause:   err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationError{
					field:   "Val",
					reason:  "embedded message failed validation",
					errCode: 0,
					cause:   err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationError{
				field:   "Val",
				reason:  "embedded message failed validation",
				errCode: 0,
				cause:   err,
			}
		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MessageRequiredButOptional with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRequiredButOptional) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRequiredButOptional with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRequiredButOptionalMultiError, or nil if none found.
func (m *MessageRequiredButOptional) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRequiredButOptional) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Val != nil {

		if m.GetVal() == nil {
			err := ValidationError{
				field:   "Val",
				reason:  "value is required",
				errCode: 0,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationError{
						field:   "Val",
						reason:  "embedded message failed validation",
						errCode: 0,
						cause:   err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationError{
						field:   "Val",
						reason:  "embedded message failed validation",
						errCode: 0,
						cause:   err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationError{
					field:   "Val",
					reason:  "embedded message failed validation",
					errCode: 0,
					cause:   err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MessageRequiredOneof with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageRequiredOneof) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageRequiredOneof with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageRequiredOneofMultiError, or nil if none found.
func (m *MessageRequiredOneof) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageRequiredOneof) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofOnePresent := false
	switch v := m.One.(type) {
	case *MessageRequiredOneof_Val:
		if v == nil {
			err := ValidationError{
				field:  "One",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOnePresent = true

		if m.GetVal() == nil {
			err := ValidationError{
				field:   "Val",
				reason:  "value is required",
				errCode: 0,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationError{
						field:   "Val",
						reason:  "embedded message failed validation",
						errCode: 0,
						cause:   err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationError{
						field:   "Val",
						reason:  "embedded message failed validation",
						errCode: 0,
						cause:   err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationError{
					field:   "Val",
					reason:  "embedded message failed validation",
					errCode: 0,
					cause:   err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofOnePresent {
		err := ValidationError{
			field:  "One",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}
