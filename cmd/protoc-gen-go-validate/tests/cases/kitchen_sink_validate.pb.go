// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v3.21.5
// source: cases/kitchen_sink.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
	//"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ComplexTestMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComplexTestMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComplexTestMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComplexTestMsgMultiError,
// or nil if none found.
func (m *ComplexTestMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *ComplexTestMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConst() != "abcd" {
		err := ValidationError{
			field:  "Const",
			reason: "value must equal abcd",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNested()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationError{
					field:  "Nested",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationError{
					field:  "Nested",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNested()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationError{
				field:  "Nested",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetIntConst() != 5 {
		err := ValidationError{
			field:  "IntConst",
			reason: "value must equal 5",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBoolConst() != false {
		err := ValidationError{
			field:  "BoolConst",
			reason: "value must equal false",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetFloatVal(); wrapper != nil {

		if wrapper.GetValue() <= 0 {
			err := ValidationError{
				field:  "FloatVal",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDurVal() == nil {
		err := ValidationError{
			field:  "DurVal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDurVal(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "DurVal",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(17*time.Second + 0*time.Nanosecond)

			if dur >= lt {
				err := ValidationError{
					field:  "DurVal",
					reason: "value must be less than 17s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if t := m.GetTsVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:  "TsVal",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Unix(7, 0)

			if ts.Sub(gt) <= 0 {
				err := ValidationError{
					field:  "TsVal",
					reason: "value must be greater than 1970-01-01 00:00:07 +0000 UTC",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if all {
		switch v := interface{}(m.GetAnother()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidationError{
					field:  "Another",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidationError{
					field:  "Another",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnother()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidationError{
				field:  "Another",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFloatConst() >= 8 {
		err := ValidationError{
			field:  "FloatConst",
			reason: "value must be less than 8",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ComplexTestMsg_DoubleIn_InLookup[m.GetDoubleIn()]; !ok {
		err := ValidationError{
			field:  "DoubleIn",
			reason: "value must be in list [456.789 123]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEnumConst() != 2 {
		err := ValidationError{
			field:  "EnumConst",
			reason: "value must equal ComplexTWO",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetAnyVal(); a != nil {

		if _, ok := _ComplexTestMsg_AnyVal_InLookup[a.GetTypeUrl()]; !ok {
			err := ValidationError{
				field:  "AnyVal",
				reason: "type URL must be in list [type.googleapis.com/google.protobuf.Duration]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetRepTsVal() {
		_, _ = idx, item

		if t := item; t != nil {
			ts, err := t.AsTime(), t.CheckValid()
			if err != nil {
				err = ValidationError{
					field:  "RepTsVal",
					reason: "value is not a valid timestamp",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {

				gte := time.Unix(0, 1000000)

				if ts.Sub(gte) < 0 {
					err := ValidationError{
						field:  "RepTsVal",
						reason: "value must be greater than or equal to 1970-01-01 00:00:00.001 +0000 UTC",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	{
		sorted_keys := make([]int32, len(m.GetMapVal()))
		i := 0
		for key := range m.GetMapVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMapVal()[key]
			_ = val

			if key >= 0 {
				err := ValidationError{
					field:  "MapVal",
					reason: "value must be less than 0",
					key:    true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for MapVal
		}
	}

	if !bytes.Equal(m.GetBytesVal(), []uint8{0x0, 0x99}) {
		err := ValidationError{
			field:  "BytesVal",
			reason: "value must equal [0 153]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofOPresent := false
	switch v := m.O.(type) {
	case *ComplexTestMsg_X:
		if v == nil {
			err := ValidationError{
				field:  "O",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOPresent = true
		// no validation rules for X
	case *ComplexTestMsg_Y:
		if v == nil {
			err := ValidationError{
				field:  "O",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofOPresent = true
		// no validation rules for Y
	default:
		_ = v // ensures v is used
	}
	if !oneofOPresent {
		err := ValidationError{
			field:  "O",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _ComplexTestMsg_DoubleIn_InLookup = map[float64]struct{}{
	456.789: {},
	123:     {},
}

var _ComplexTestMsg_AnyVal_InLookup = map[string]struct{}{
	"type.googleapis.com/google.protobuf.Duration": {},
}
