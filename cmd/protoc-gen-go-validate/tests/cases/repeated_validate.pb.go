// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v3.21.5
// source: cases/repeated.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
	//"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Embed with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Embed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Embed with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmbedMultiError, or nil if none found.
func (m *Embed) ValidateAll() error {
	return m.validate(true)
}

func (m *Embed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() <= 0 {
		err := ValidationError{
			field:  "Val",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedMin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedMin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedMin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedMinMultiError, or
// nil if none found.
func (m *RepeatedMin) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedMin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) < 2 {
		err := ValidationError{
			field:  "Val",
			reason: "value must contain at least 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedMax with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedMax) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedMax with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedMaxMultiError, or
// nil if none found.
func (m *RepeatedMax) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedMax) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) > 3 {
		err := ValidationError{
			field:  "Val",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedMinMax with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedMinMax) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedMinMax with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedMinMaxMultiError,
// or nil if none found.
func (m *RepeatedMinMax) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedMinMax) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetVal()); l < 2 || l > 4 {
		err := ValidationError{
			field:  "Val",
			reason: "value must contain between 2 and 4 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedExact with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedExact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedExact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedExactMultiError, or
// nil if none found.
func (m *RepeatedExact) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedExact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) != 3 {
		err := ValidationError{
			field:  "Val",
			reason: "value must contain exactly 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedUnique with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedUnique) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedUnique with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedUniqueMultiError,
// or nil if none found.
func (m *RepeatedUnique) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedUnique) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	_RepeatedUnique_Val_Unique := // make(map[{[ (typ $f).Element ]}]struct{}, len(m.GetVal()))
		make(map[string]struct{}, len(m.GetVal()))

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, exists := _RepeatedUnique_Val_Unique[item]; exists {
			err := ValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_RepeatedUnique_Val_Unique[item] = struct{}{}
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedItemRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedItemRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedItemRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedItemRuleMultiError, or nil if none found.
func (m *RepeatedItemRule) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedItemRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if item <= 0 {
			err := ValidationError{
				field:  "Val",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedItemPattern with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedItemPattern) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedItemPattern with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedItemPatternMultiError, or nil if none found.
func (m *RepeatedItemPattern) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedItemPattern) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if !_RepeatedItemPattern_Val_Pattern.MatchString(item) {
			err := ValidationError{
				field:  "Val",
				reason: "value does not match regex pattern \"(?i)^[a-z0-9]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedItemPattern_Val_Pattern = regexp.MustCompile("(?i)^[a-z0-9]+$")

// Validate checks the field values on RepeatedEmbedSkip with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedEmbedSkip) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEmbedSkip with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedEmbedSkipMultiError, or nil if none found.
func (m *RepeatedEmbedSkip) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEmbedSkip) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedItemIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedItemIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedItemIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedItemInMultiError,
// or nil if none found.
func (m *RepeatedItemIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedItemIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedItemIn_Val_InLookup[item]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be in list [foo bar]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedItemIn_Val_InLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
}

// Validate checks the field values on RepeatedItemNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedItemNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedItemNotIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedItemNotInMultiError, or nil if none found.
func (m *RepeatedItemNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedItemNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedItemNotIn_Val_NotInLookup[item]; ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must not be in list [foo bar]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedItemNotIn_Val_NotInLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
}

// Validate checks the field values on RepeatedEnumIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedEnumIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEnumIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedEnumInMultiError,
// or nil if none found.
func (m *RepeatedEnumIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEnumIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEnumIn_Val_InLookup[item]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be in list [X]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedEnumIn_Val_InLookup = map[AnEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedEnumNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedEnumNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEnumNotIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedEnumNotInMultiError, or nil if none found.
func (m *RepeatedEnumNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEnumNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEnumNotIn_Val_NotInLookup[item]; ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must not be in list [X]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedEnumNotIn_Val_NotInLookup = map[AnEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedEmbeddedEnumIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedEmbeddedEnumIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEmbeddedEnumIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedEmbeddedEnumInMultiError, or nil if none found.
func (m *RepeatedEmbeddedEnumIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEmbeddedEnumIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEmbeddedEnumIn_Val_InLookup[item]; !ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must be in list [A]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedEmbeddedEnumIn_Val_InLookup = map[RepeatedEmbeddedEnumIn_AnotherInEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedEmbeddedEnumNotIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedEmbeddedEnumNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedEmbeddedEnumNotIn with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedEmbeddedEnumNotInMultiError, or nil if none found.
func (m *RepeatedEmbeddedEnumNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedEmbeddedEnumNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEmbeddedEnumNotIn_Val_NotInLookup[item]; ok {
			err := ValidationError{
				field:  "Val",
				reason: "value must not be in list [A]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedEmbeddedEnumNotIn_Val_NotInLookup = map[RepeatedEmbeddedEnumNotIn_AnotherNotInEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedAnyIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedAnyIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedAnyIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedAnyInMultiError, or
// nil if none found.
func (m *RepeatedAnyIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedAnyIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if a := item; a != nil {

			if _, ok := _RepeatedAnyIn_Val_InLookup[a.GetTypeUrl()]; !ok {
				err := ValidationError{
					field:  "Val",
					reason: "type URL must be in list [type.googleapis.com/google.protobuf.Duration]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedAnyIn_Val_InLookup = map[string]struct{}{
	"type.googleapis.com/google.protobuf.Duration": {},
}

// Validate checks the field values on RepeatedAnyNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedAnyNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedAnyNotIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedAnyNotInMultiError, or nil if none found.
func (m *RepeatedAnyNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedAnyNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if a := item; a != nil {

			if _, ok := _RepeatedAnyNotIn_Val_NotInLookup[a.GetTypeUrl()]; ok {
				err := ValidationError{
					field:  "Val",
					reason: "type URL must not be in list [type.googleapis.com/google.protobuf.Timestamp]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _RepeatedAnyNotIn_Val_NotInLookup = map[string]struct{}{
	"type.googleapis.com/google.protobuf.Timestamp": {},
}

// Validate checks the field values on RepeatedMinAndItemLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedMinAndItemLen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedMinAndItemLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedMinAndItemLenMultiError, or nil if none found.
func (m *RepeatedMinAndItemLen) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedMinAndItemLen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) < 1 {
		err := ValidationError{
			field:  "Val",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			err := ValidationError{
				field:  "Val",
				reason: "value length must be 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedMinAndMaxItemLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedMinAndMaxItemLen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedMinAndMaxItemLen with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedMinAndMaxItemLenMultiError, or nil if none found.
func (m *RepeatedMinAndMaxItemLen) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedMinAndMaxItemLen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetVal()); l < 1 || l > 3 {
		err := ValidationError{
			field:  "Val",
			reason: "value must contain between 1 and 3 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedDuration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedDuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedDuration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedDurationMultiError, or nil if none found.
func (m *RepeatedDuration) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedDuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if d := item; d != nil {
			dur, err := d.AsDuration(), d.CheckValid()
			if err != nil {
				err = ValidationError{
					field:  "Val",
					reason: "value is not a valid duration",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {

				gte := time.Duration(0*time.Second + 1000000*time.Nanosecond)

				if dur < gte {
					err := ValidationError{
						field:  "Val",
						reason: "value must be greater than or equal to 1ms",
					}
					if !all {
						return err
					}
					errors = append(errors, err)
				}

			}
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on RepeatedExactIgnore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedExactIgnore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedExactIgnore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedExactIgnoreMultiError, or nil if none found.
func (m *RepeatedExactIgnore) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedExactIgnore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) > 0 {

		if len(m.GetVal()) != 3 {
			err := ValidationError{
				field:  "Val",
				reason: "value must contain exactly 3 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}
