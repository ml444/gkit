// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v4.25.2
// source: cases/wkt_timestamp.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
	// "google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimestampRequired with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimestampRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampRequired with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampRequiredMultiError, or nil if none found.
func (m *TimestampRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVal() == nil {
		err := ValidationError{
			field:   "Val",
			reason:  "value is required",
			errCode: 0,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampConst with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampConst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampConst with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampConstMultiError,
// or nil if none found.
func (m *TimestampConst) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampConst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			if !ts.Equal(time.Unix(3, 0)) {
				err := ValidationError{
					field:   "Val",
					reason:  "value must equal 1970-01-01 00:00:03 +0000 UTC",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampLT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampLTMultiError, or
// nil if none found.
func (m *TimestampLT) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Unix(0, 0)

			if ts.Sub(lt) >= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be less than 1970-01-01 00:00:00 +0000 UTC",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampLTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampLTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampLTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampLTEMultiError, or
// nil if none found.
func (m *TimestampLTE) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampLTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Unix(1, 0)

			if ts.Sub(lte) > 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be less than or equal to 1970-01-01 00:00:01 +0000 UTC",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampGT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampGT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampGTMultiError, or
// nil if none found.
func (m *TimestampGT) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Unix(0, 1000)

			if ts.Sub(gt) <= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be greater than 1970-01-01 00:00:00.000001 +0000 UTC",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampGTE with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampGTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampGTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampGTEMultiError, or
// nil if none found.
func (m *TimestampGTE) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampGTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gte := time.Unix(0, 1000000)

			if ts.Sub(gte) < 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be greater than or equal to 1970-01-01 00:00:00.001 +0000 UTC",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampGTLT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampGTLT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampGTLT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampGTLTMultiError, or
// nil if none found.
func (m *TimestampGTLT) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampGTLT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Unix(1, 0)
			gt := time.Unix(0, 0)

			if ts.Sub(gt) <= 0 || ts.Sub(lt) >= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be inside range (1970-01-01 00:00:00 +0000 UTC, 1970-01-01 00:00:01 +0000 UTC)",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimestampExLTGT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampExLTGT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampExLTGTMultiError, or nil if none found.
func (m *TimestampExLTGT) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampExLTGT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Unix(0, 0)
			gt := time.Unix(1, 0)

			if ts.Sub(lt) >= 0 && ts.Sub(gt) <= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be outside range [1970-01-01 00:00:00 +0000 UTC, 1970-01-01 00:00:01 +0000 UTC]",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimestampGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampGTELTEMultiError, or nil if none found.
func (m *TimestampGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Unix(3600, 0)
			gte := time.Unix(60, 0)

			if ts.Sub(gte) < 0 || ts.Sub(lte) > 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be inside range [1970-01-01 00:01:00 +0000 UTC, 1970-01-01 01:00:00 +0000 UTC]",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimestampExGTELTE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampExGTELTE with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampExGTELTEMultiError, or nil if none found.
func (m *TimestampExGTELTE) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampExGTELTE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Unix(60, 0)
			gte := time.Unix(3600, 0)

			if ts.Sub(lte) > 0 && ts.Sub(gte) < 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be outside range (1970-01-01 00:01:00 +0000 UTC, 1970-01-01 01:00:00 +0000 UTC)",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampLTNow with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampLTNow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampLTNow with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampLTNowMultiError,
// or nil if none found.
func (m *TimestampLTNow) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampLTNow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) >= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be less than now",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampGTNow with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimestampGTNow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampGTNow with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimestampGTNowMultiError,
// or nil if none found.
func (m *TimestampGTNow) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampGTNow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be greater than now",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampWithin with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimestampWithin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampWithinMultiError, or nil if none found.
func (m *TimestampWithin) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampWithin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(3600*time.Second + 0*time.Nanosecond)

			if ts.Sub(now.Add(within)) >= 0 || ts.Sub(now.Add(-within)) <= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be within 1h0m0s of now",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampLTNowWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampLTNowWithin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampLTNowWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampLTNowWithinMultiError, or nil if none found.
func (m *TimestampLTNowWithin) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampLTNowWithin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(3600*time.Second + 0*time.Nanosecond)

			if ts.Sub(now) >= 0 || ts.Sub(now.Add(-within)) < 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be less than now within 1h0m0s",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on TimestampGTNowWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampGTNowWithin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampGTNowWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampGTNowWithinMultiError, or nil if none found.
func (m *TimestampGTNowWithin) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampGTNowWithin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if t := m.GetVal(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ValidationError{
				field:   "Val",
				reason:  "value is not a valid timestamp",
				errCode: 0,
				cause:   err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(3600*time.Second + 0*time.Nanosecond)

			if ts.Sub(now) <= 0 || ts.Sub(now.Add(within)) > 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be greater than now within 1h0m0s",
					errCode: 0,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}
