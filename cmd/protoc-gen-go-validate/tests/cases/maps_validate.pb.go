// Code generated by protoc-gen-go-validate. DO NOT EDIT.
// - protoc-gen-go-validate 1.0.0
// - protoc             v4.25.2
// source: cases/maps.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"
	// "google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	//_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MapMin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapMin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapMin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MapMinMultiError, or nil if none found.
func (m *MapMin) ValidateAll() error {
	return m.validate(true)
}

func (m *MapMin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) < 2 {
		err := ValidationError{
			field:   "Val",
			reason:  "value must contain at least 2 pair(s)",
			errCode: 0,
			key:     true,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapMax with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapMax) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapMax with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MapMaxMultiError, or nil if none found.
func (m *MapMax) ValidateAll() error {
	return m.validate(true)
}

func (m *MapMax) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) > 3 {
		err := ValidationError{
			field:   "Val",
			reason:  "value must contain no more than 3 pair(s)",
			errCode: 0,
			key:     true,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapMinMax with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapMinMax) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapMinMax with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapMinMaxMultiError, or nil
// if none found.
func (m *MapMinMax) ValidateAll() error {
	return m.validate(true)
}

func (m *MapMinMax) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetVal()); l < 2 || l > 4 {
		err := ValidationError{
			field:   "Val",
			reason:  "value must contain between 2 and 4 pairs, inclusive",
			errCode: 0,
			key:     true,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapExact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapExact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapExact with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapExactMultiError, or nil
// if none found.
func (m *MapExact) ValidateAll() error {
	return m.validate(true)
}

func (m *MapExact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) != 3 {
		err := ValidationError{
			field:   "Val",
			reason:  "value must contain exactly 3 pair(s)",
			errCode: 0,
			key:     true,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapNoSparse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapNoSparse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapNoSparse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapNoSparseMultiError, or
// nil if none found.
func (m *MapNoSparse) ValidateAll() error {
	return m.validate(true)
}

func (m *MapNoSparse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]uint32, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			if val == nil {
				err := ValidationError{
					field:   fmt.Sprintf("Val[%v]", key),
					reason:  "value cannot be sparse, all pairs must be non-nil",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Val

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ValidationError{
							field:   "Val",
							reason:  "embedded message failed validation",
							errCode: 0,
							cause:   err, key: true,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ValidationError{
							field:   "Val",
							reason:  "embedded message failed validation",
							errCode: 0,
							cause:   err, key: true,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ValidationError{
						field:   "Val",
						reason:  "embedded message failed validation",
						errCode: 0,
						cause:   err, key: true,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapKeys with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapKeys with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MapKeysMultiError, or nil if none found.
func (m *MapKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *MapKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			if key >= 0 {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be less than 0",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Val
		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapValues with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapValues with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapValuesMultiError, or nil
// if none found.
func (m *MapValues) ValidateAll() error {
	return m.validate(true)
}

func (m *MapValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			// no validation rules for Val

			if utf8.RuneCountInString(val) < 3 {
				err := ValidationError{
					field:   "Val",
					reason:  "value length must be at least 3 runes",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapKeysPattern with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapKeysPattern) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapKeysPattern with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapKeysPatternMultiError,
// or nil if none found.
func (m *MapKeysPattern) ValidateAll() error {
	return m.validate(true)
}

func (m *MapKeysPattern) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			if !_MapKeysPattern_Val_Pattern.MatchString(key) {
				err := ValidationError{
					field:   "Val",
					reason:  "value does not match regex pattern \"^[a-z0-9]+$\"",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Val
		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _MapKeysPattern_Val_Pattern = regexp.MustCompile("^[a-z0-9]+$")

// Validate checks the field values on MapValuesPattern with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MapValuesPattern) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapValuesPattern with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MapValuesPatternMultiError, or nil if none found.
func (m *MapValuesPattern) ValidateAll() error {
	return m.validate(true)
}

func (m *MapValuesPattern) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			// no validation rules for Val

			if !_MapValuesPattern_Val_Pattern.MatchString(val) {
				err := ValidationError{
					field:   "Val",
					reason:  "value does not match regex pattern \"(?i)^[a-z0-9]+$\"",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _MapValuesPattern_Val_Pattern = regexp.MustCompile("(?i)^[a-z0-9]+$")

// Validate checks the field values on MapExactIgnore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapExactIgnore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapExactIgnore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapExactIgnoreMultiError,
// or nil if none found.
func (m *MapExactIgnore) ValidateAll() error {
	return m.validate(true)
}

func (m *MapExactIgnore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetVal()) > 0 {

		if len(m.GetVal()) != 3 {
			err := ValidationError{
				field:   "Val",
				reason:  "value must contain exactly 3 pair(s)",
				errCode: 0,
				key:     true,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MultipleMaps with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MultipleMaps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleMaps with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MultipleMapsMultiError, or
// nil if none found.
func (m *MultipleMaps) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleMaps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]uint32, len(m.GetFirst()))
		i := 0
		for key := range m.GetFirst() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFirst()[key]
			_ = val

			if key <= 0 {
				err := ValidationError{
					field:   "First",
					reason:  "value must be greater than 0",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for First
		}
	}

	{
		sorted_keys := make([]int32, len(m.GetSecond()))
		i := 0
		for key := range m.GetSecond() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSecond()[key]
			_ = val

			if key >= 0 {
				err := ValidationError{
					field:   "Second",
					reason:  "value must be less than 0",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Second
		}
	}

	{
		sorted_keys := make([]int32, len(m.GetThird()))
		i := 0
		for key := range m.GetThird() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetThird()[key]
			_ = val

			if key <= 0 {
				err := ValidationError{
					field:   "Third",
					reason:  "value must be greater than 0",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Third
		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

// Validate checks the field values on MapKeysIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapKeysIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapKeysIn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapKeysInMultiError, or nil
// if none found.
func (m *MapKeysIn) ValidateAll() error {
	return m.validate(true)
}

func (m *MapKeysIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			if _, ok := _MapKeysIn_Val_InLookup[key]; !ok {
				err := ValidationError{
					field:   "Val",
					reason:  "value must be in list [foo bar]",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Val
		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _MapKeysIn_Val_InLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
}

// Validate checks the field values on MapKeysNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapKeysNotIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapKeysNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapKeysNotInMultiError, or
// nil if none found.
func (m *MapKeysNotIn) ValidateAll() error {
	return m.validate(true)
}

func (m *MapKeysNotIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVal()))
		i := 0
		for key := range m.GetVal() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVal()[key]
			_ = val

			if _, ok := _MapKeysNotIn_Val_NotInLookup[key]; ok {
				err := ValidationError{
					field:   "Val",
					reason:  "value must not be in list [foo bar]",
					errCode: 0,
					key:     true,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Val
		}
	}

	if len(errors) > 0 {
		return MultiError(errors)
	}

	return nil
}

var _MapKeysNotIn_Val_NotInLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
}
