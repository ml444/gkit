// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: orm/orm.proto

package orm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexOpKind int32

const (
	IndexOpKind_USE    IndexOpKind = 0
	IndexOpKind_FORCE  IndexOpKind = 1
	IndexOpKind_IGNORE IndexOpKind = 2
)

// Enum value maps for IndexOpKind.
var (
	IndexOpKind_name = map[int32]string{
		0: "USE",
		1: "FORCE",
		2: "IGNORE",
	}
	IndexOpKind_value = map[string]int32{
		"USE":    0,
		"FORCE":  1,
		"IGNORE": 2,
	}
)

func (x IndexOpKind) Enum() *IndexOpKind {
	p := new(IndexOpKind)
	*p = x
	return p
}

func (x IndexOpKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexOpKind) Descriptor() protoreflect.EnumDescriptor {
	return file_orm_orm_proto_enumTypes[0].Descriptor()
}

func (IndexOpKind) Type() protoreflect.EnumType {
	return &file_orm_orm_proto_enumTypes[0]
}

func (x IndexOpKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexOpKind.Descriptor instead.
func (IndexOpKind) EnumDescriptor() ([]byte, []int) {
	return file_orm_orm_proto_rawDescGZIP(), []int{0}
}

type IndexForKind int32

const (
	IndexForKind_FOR_OBJ_NIL IndexForKind = 0
	IndexForKind_JOIN        IndexForKind = 1
	IndexForKind_GROUP_BY    IndexForKind = 2
	IndexForKind_ORDER_BY    IndexForKind = 3
)

// Enum value maps for IndexForKind.
var (
	IndexForKind_name = map[int32]string{
		0: "FOR_OBJ_NIL",
		1: "JOIN",
		2: "GROUP_BY",
		3: "ORDER_BY",
	}
	IndexForKind_value = map[string]int32{
		"FOR_OBJ_NIL": 0,
		"JOIN":        1,
		"GROUP_BY":    2,
		"ORDER_BY":    3,
	}
)

func (x IndexForKind) Enum() *IndexForKind {
	p := new(IndexForKind)
	*p = x
	return p
}

func (x IndexForKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexForKind) Descriptor() protoreflect.EnumDescriptor {
	return file_orm_orm_proto_enumTypes[1].Descriptor()
}

func (IndexForKind) Type() protoreflect.EnumType {
	return &file_orm_orm_proto_enumTypes[1]
}

func (x IndexForKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexForKind.Descriptor instead.
func (IndexForKind) EnumDescriptor() ([]byte, []int) {
	return file_orm_orm_proto_rawDescGZIP(), []int{1}
}

type TimestampKind int32

const (
	TimestampKind_UNSPECIFIED TimestampKind = 0
	TimestampKind_SECOND      TimestampKind = 1
	TimestampKind_MILLI       TimestampKind = 2
	TimestampKind_NANO        TimestampKind = 3
)

// Enum value maps for TimestampKind.
var (
	TimestampKind_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SECOND",
		2: "MILLI",
		3: "NANO",
	}
	TimestampKind_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SECOND":      1,
		"MILLI":       2,
		"NANO":        3,
	}
)

func (x TimestampKind) Enum() *TimestampKind {
	p := new(TimestampKind)
	*p = x
	return p
}

func (x TimestampKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimestampKind) Descriptor() protoreflect.EnumDescriptor {
	return file_orm_orm_proto_enumTypes[2].Descriptor()
}

func (TimestampKind) Type() protoreflect.EnumType {
	return &file_orm_orm_proto_enumTypes[2]
}

func (x TimestampKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimestampKind.Descriptor instead.
func (TimestampKind) EnumDescriptor() ([]byte, []int) {
	return file_orm_orm_proto_rawDescGZIP(), []int{2}
}

type IndexClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     IndexOpKind  `protobuf:"varint,1,opt,name=op,proto3,enum=orm.IndexOpKind" json:"op,omitempty"`
	For    IndexForKind `protobuf:"varint,2,opt,name=for,proto3,enum=orm.IndexForKind" json:"for,omitempty"`
	Indexs []string     `protobuf:"bytes,3,rep,name=indexs,proto3" json:"indexs,omitempty"`
}

func (x *IndexClause) Reset() {
	*x = IndexClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orm_orm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexClause) ProtoMessage() {}

func (x *IndexClause) ProtoReflect() protoreflect.Message {
	mi := &file_orm_orm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexClause.ProtoReflect.Descriptor instead.
func (*IndexClause) Descriptor() ([]byte, []int) {
	return file_orm_orm_proto_rawDescGZIP(), []int{0}
}

func (x *IndexClause) GetOp() IndexOpKind {
	if x != nil {
		return x.Op
	}
	return IndexOpKind_USE
}

func (x *IndexClause) GetFor() IndexForKind {
	if x != nil {
		return x.For
	}
	return IndexForKind_FOR_OBJ_NIL
}

func (x *IndexClause) GetIndexs() []string {
	if x != nil {
		return x.Indexs
	}
	return nil
}

type ORMTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指定 db 列名
	Column *string `protobuf:"bytes,1,opt,name=column,proto3,oneof" json:"column,omitempty"`
	// 列数据类型，推荐使用兼容性好的通用类型，
	// 例如：所有数据库都支持 bool、int、uint、float、string、time、bytes
	// 并且可以和其他标签一起使用，例如：not null、size, autoIncrement…
	// 像 varbinary(8) 这样指定数据库数据类型也是支持的。
	// 在使用指定数据库数据类型时，它需要是完整的数据库数据类型，
	// 如：MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT
	Type *string `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// 定义列的默认值
	Default *string `protobuf:"bytes,3,opt,name=default,proto3,oneof" json:"default,omitempty"`
	// 指定列为 NOT NULL
	NotNull *bool `protobuf:"varint,4,opt,name=not_null,json=notNull,proto3,oneof" json:"not_null,omitempty"`
	// 迁移时为字段添加注释
	Comment *string `protobuf:"bytes,5,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	// 将列定义为主键
	PrimaryKey *bool `protobuf:"varint,6,opt,name=primary_key,json=primaryKey,proto3,oneof" json:"primary_key,omitempty"`
	// 根据参数创建索引，多个字段使用相同的名称则创建复合索引
	//
	//	type User struct {
	//	   Name  string `gorm:"index"`
	//	   Name2 string `gorm:"index:idx_name,unique"`
	//	   Name3 string `gorm:"index:,sort:desc,collate:utf8,type:btree,length:10,where:name3 != 'jinzhu'"`
	//	   Name4 string `gorm:"uniqueIndex"`
	//	   Age   int64  `gorm:"index:,class:FULLTEXT,comment:hello \\, world,where:age > 10"`
	//	   Age2  int64  `gorm:"index:,expression:ABS(age)"`
	//	}
	//
	// 您可以使用 priority 指定顺序，默认优先级值是 10，如果优先级值相同，则顺序取决于模型结构体字段的顺序。
	//
	//	type User struct {
	//	   Name   string `gorm:"index:idx_member,priority:2"`
	//	   Number string `gorm:"index:idx_member,priority:1"`
	//	}
	//
	// 多索引
	//
	//	type User struct {
	//	   Name   string `gorm:"index:idx_member;uniqueIndex:idx_member2"`
	//	   Number string `gorm:"index:idx_member;index:idx_member2,unique"`
	//	}
	//
	// // MySQL 选项
	//
	//	type User struct {
	//	    Name string `gorm:"index:,class:FULLTEXT,option:WITH PARSER ngram INVISIBLE"`
	//	}
	//
	// // PostgreSQL 选项
	//
	//	type User struct {
	//	    Name string `gorm:"index:,option:CONCURRENTLY"`
	//	}
	Index []string `protobuf:"bytes,8,rep,name=index,proto3" json:"index,omitempty"`
	// uniqueIndex 标签的作用与 index 类似，它等效于 index:,unique
	//
	//	type User struct {
	//	   Name  string `gorm:"uniqueIndex"`
	//	   Name2 string `gorm:"uniqueIndex:idx_name"`
	//	}
	UniqueIndex []string `protobuf:"bytes,9,rep,name=unique_index,json=uniqueIndex,proto3" json:"unique_index,omitempty"`
	// 定义列数据类型的大小或长度，例如 size: 256
	Size *int64 `protobuf:"varint,10,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// 指定列的精度
	Precision *int64 `protobuf:"varint,11,opt,name=precision,proto3,oneof" json:"precision,omitempty"`
	// 指定列大小
	Scale *int64 `protobuf:"varint,12,opt,name=scale,proto3,oneof" json:"scale,omitempty"`
	// 嵌套字段
	Embedded *bool `protobuf:"varint,13,opt,name=embedded,proto3,oneof" json:"embedded,omitempty"`
	// 嵌入字段的列名前缀
	EmbeddedPrefix *string `protobuf:"bytes,14,opt,name=embedded_prefix,json=embeddedPrefix,proto3,oneof" json:"embedded_prefix,omitempty"`
	// 指定列为自动增长
	AutoIncrement *bool `protobuf:"varint,15,opt,name=auto_increment,json=autoIncrement,proto3,oneof" json:"auto_increment,omitempty"`
	// 指定自动增长的步长，控制连续记录之间的间隔
	AutoIncrementIncrement *int64 `protobuf:"varint,16,opt,name=auto_increment_increment,json=autoIncrementIncrement,proto3,oneof" json:"auto_increment_increment,omitempty"`
	// 创建时追踪当前时间，对于 int 字段，它会追踪时间戳秒数，
	// 您可以使用 nano/milli 来追踪纳秒、毫秒时间戳，
	// 例如：autoCreateTime:nano
	AutoCreateTime *TimestampKind `protobuf:"varint,17,opt,name=auto_create_time,json=autoCreateTime,proto3,enum=orm.TimestampKind,oneof" json:"auto_create_time,omitempty"`
	// 创建/更新时追踪当前时间，对于 int 字段，它会追踪时间戳秒数，
	// 您可以使用 nano/milli 来追踪纳秒、毫秒时间戳，
	// 例如：autoUpdateTime:milli
	AutoUpdateTime *TimestampKind `protobuf:"varint,18,opt,name=auto_update_time,json=autoUpdateTime,proto3,enum=orm.TimestampKind,oneof" json:"auto_update_time,omitempty"`
	// 创建检查约束，例如 check:age > 13，或者 check:age > 13 and age < 18
	// 请注意，如果您使用的是 MySQL 5.7 或更低版本，则不支持检查约束。
	//
	//	type UserIndex struct {
	//	   Name  string `gorm:"check:name_checker,name <> 'jinzhu'"`
	//	   Name2 string `gorm:"check:name <> 'jinzhu'"`
	//	   Name3 string `gorm:"check:,name <> 'jinzhu'"`
	//	}
	Check *string `protobuf:"bytes,19,opt,name=check,proto3,oneof" json:"check,omitempty"`
	// 忽略该字段
	// - 表示无读写
	IgnoreRw *bool `protobuf:"varint,21,opt,name=ignore_rw,json=ignoreRw,proto3,oneof" json:"ignore_rw,omitempty"`
	// -:migration 表示无迁移权限，
	IgnoreMigration *bool `protobuf:"varint,22,opt,name=ignore_migration,json=ignoreMigration,proto3,oneof" json:"ignore_migration,omitempty"`
	// -:all 表示无读写迁移权限
	IgnoreAll *bool `protobuf:"varint,23,opt,name=ignore_all,json=ignoreAll,proto3,oneof" json:"ignore_all,omitempty"`
	// 设置字段写入的权限， <-:create 只创建
	OnlyCreate *bool `protobuf:"varint,24,opt,name=only_create,json=onlyCreate,proto3,oneof" json:"only_create,omitempty"`
	// 设置字段写入的权限， <-:update 只更新
	OnlyUpdate *bool `protobuf:"varint,25,opt,name=only_update,json=onlyUpdate,proto3,oneof" json:"only_update,omitempty"`
	// <-:false 无写入权限
	DisableWrite *bool `protobuf:"varint,26,opt,name=disable_write,json=disableWrite,proto3,oneof" json:"disable_write,omitempty"`
	// ->:false 无读取权限
	DisableRead *bool `protobuf:"varint,27,opt,name=disable_read,json=disableRead,proto3,oneof" json:"disable_read,omitempty"`
	// 指定将数据序列化或反序列化到数据库中的序列化器,
	// 例如: serializer:json/gob/unixtime
	Serializer *string `protobuf:"bytes,28,opt,name=serializer,proto3,oneof" json:"serializer,omitempty"`
	Encrypt    *bool   `protobuf:"varint,29,opt,name=encrypt,proto3,oneof" json:"encrypt,omitempty"`
	// 指定当前模型的列名，用作联接表中的外键.关联字段的外键名称，例如：`gorm:"foreignKey:UserID"`
	ForeignKey *string `protobuf:"bytes,30,opt,name=foreign_key,json=foreignKey,proto3,oneof" json:"foreign_key,omitempty"`
	// 关联字段的关联表名称，例如：`gorm:"foreignKey:UserNumber;references:MemberNumber"`
	References *string `protobuf:"bytes,31,opt,name=references,proto3,oneof" json:"references,omitempty"`
	// Defines the polymorphic type, typically the model name.
	// By default polymorphic:<value> will prefix the column type and column id with <value>.
	// The value will be the table name pluralized.
	// Toys []Toy `gorm:"polymorphic:Owner;"`
	Polymorphic *string `protobuf:"bytes,32,opt,name=polymorphic,proto3,oneof" json:"polymorphic,omitempty"`
	// type Dog struct {
	// ID   int
	// Name string
	// Toys []Toy `gorm:"polymorphicType:Kind;polymorphicId:OwnerID;polymorphicValue:master"`
	// }
	//
	// type Toy struct {
	// ID        int
	// Name      string
	// OwnerID   int
	// Kind      string
	// }
	PolymorphicType  *string `protobuf:"bytes,33,opt,name=polymorphic_type,json=polymorphicType,proto3,oneof" json:"polymorphic_type,omitempty"`    // Specifies the column type.
	PolymorphicValue *string `protobuf:"bytes,34,opt,name=polymorphic_value,json=polymorphicValue,proto3,oneof" json:"polymorphic_value,omitempty"` // Specifies the value of the type.
	PolymorphicId    *string `protobuf:"bytes,35,opt,name=polymorphic_id,json=polymorphicId,proto3,oneof" json:"polymorphic_id,omitempty"`          // Specifies the column ID.
	// Names the join table used in a many-to-many relationship.
	// `gorm:"many2many:user_languages;"`
	Many2Many *string `protobuf:"bytes,36,opt,name=many2many,proto3,oneof" json:"many2many,omitempty"`
	// Identifies the foreign key column in the join table that maps back to the current model’s table.
	JoinForeignKey *string `protobuf:"bytes,37,opt,name=join_foreign_key,json=joinForeignKey,proto3,oneof" json:"join_foreign_key,omitempty"`
	// Points to the foreign key column in the join table that links to the reference model’s table.
	JoinReferences *string `protobuf:"bytes,38,opt,name=join_references,json=joinReferences,proto3,oneof" json:"join_references,omitempty"`
	// constraint 标签的 OnDelete、OnUpdate 选项设置外键约束，例如：
	// `gorm:"constraint:OnDelete:CASCADE;OnUpdate:SET NULL;"`
	Constraint *string `protobuf:"bytes,39,opt,name=constraint,proto3,oneof" json:"constraint,omitempty"`
}

func (x *ORMTags) Reset() {
	*x = ORMTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orm_orm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMTags) ProtoMessage() {}

func (x *ORMTags) ProtoReflect() protoreflect.Message {
	mi := &file_orm_orm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMTags.ProtoReflect.Descriptor instead.
func (*ORMTags) Descriptor() ([]byte, []int) {
	return file_orm_orm_proto_rawDescGZIP(), []int{1}
}

func (x *ORMTags) GetColumn() string {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return ""
}

func (x *ORMTags) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ORMTags) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

func (x *ORMTags) GetNotNull() bool {
	if x != nil && x.NotNull != nil {
		return *x.NotNull
	}
	return false
}

func (x *ORMTags) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ORMTags) GetPrimaryKey() bool {
	if x != nil && x.PrimaryKey != nil {
		return *x.PrimaryKey
	}
	return false
}

func (x *ORMTags) GetIndex() []string {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *ORMTags) GetUniqueIndex() []string {
	if x != nil {
		return x.UniqueIndex
	}
	return nil
}

func (x *ORMTags) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ORMTags) GetPrecision() int64 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *ORMTags) GetScale() int64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *ORMTags) GetEmbedded() bool {
	if x != nil && x.Embedded != nil {
		return *x.Embedded
	}
	return false
}

func (x *ORMTags) GetEmbeddedPrefix() string {
	if x != nil && x.EmbeddedPrefix != nil {
		return *x.EmbeddedPrefix
	}
	return ""
}

func (x *ORMTags) GetAutoIncrement() bool {
	if x != nil && x.AutoIncrement != nil {
		return *x.AutoIncrement
	}
	return false
}

func (x *ORMTags) GetAutoIncrementIncrement() int64 {
	if x != nil && x.AutoIncrementIncrement != nil {
		return *x.AutoIncrementIncrement
	}
	return 0
}

func (x *ORMTags) GetAutoCreateTime() TimestampKind {
	if x != nil && x.AutoCreateTime != nil {
		return *x.AutoCreateTime
	}
	return TimestampKind_UNSPECIFIED
}

func (x *ORMTags) GetAutoUpdateTime() TimestampKind {
	if x != nil && x.AutoUpdateTime != nil {
		return *x.AutoUpdateTime
	}
	return TimestampKind_UNSPECIFIED
}

func (x *ORMTags) GetCheck() string {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return ""
}

func (x *ORMTags) GetIgnoreRw() bool {
	if x != nil && x.IgnoreRw != nil {
		return *x.IgnoreRw
	}
	return false
}

func (x *ORMTags) GetIgnoreMigration() bool {
	if x != nil && x.IgnoreMigration != nil {
		return *x.IgnoreMigration
	}
	return false
}

func (x *ORMTags) GetIgnoreAll() bool {
	if x != nil && x.IgnoreAll != nil {
		return *x.IgnoreAll
	}
	return false
}

func (x *ORMTags) GetOnlyCreate() bool {
	if x != nil && x.OnlyCreate != nil {
		return *x.OnlyCreate
	}
	return false
}

func (x *ORMTags) GetOnlyUpdate() bool {
	if x != nil && x.OnlyUpdate != nil {
		return *x.OnlyUpdate
	}
	return false
}

func (x *ORMTags) GetDisableWrite() bool {
	if x != nil && x.DisableWrite != nil {
		return *x.DisableWrite
	}
	return false
}

func (x *ORMTags) GetDisableRead() bool {
	if x != nil && x.DisableRead != nil {
		return *x.DisableRead
	}
	return false
}

func (x *ORMTags) GetSerializer() string {
	if x != nil && x.Serializer != nil {
		return *x.Serializer
	}
	return ""
}

func (x *ORMTags) GetEncrypt() bool {
	if x != nil && x.Encrypt != nil {
		return *x.Encrypt
	}
	return false
}

func (x *ORMTags) GetForeignKey() string {
	if x != nil && x.ForeignKey != nil {
		return *x.ForeignKey
	}
	return ""
}

func (x *ORMTags) GetReferences() string {
	if x != nil && x.References != nil {
		return *x.References
	}
	return ""
}

func (x *ORMTags) GetPolymorphic() string {
	if x != nil && x.Polymorphic != nil {
		return *x.Polymorphic
	}
	return ""
}

func (x *ORMTags) GetPolymorphicType() string {
	if x != nil && x.PolymorphicType != nil {
		return *x.PolymorphicType
	}
	return ""
}

func (x *ORMTags) GetPolymorphicValue() string {
	if x != nil && x.PolymorphicValue != nil {
		return *x.PolymorphicValue
	}
	return ""
}

func (x *ORMTags) GetPolymorphicId() string {
	if x != nil && x.PolymorphicId != nil {
		return *x.PolymorphicId
	}
	return ""
}

func (x *ORMTags) GetMany2Many() string {
	if x != nil && x.Many2Many != nil {
		return *x.Many2Many
	}
	return ""
}

func (x *ORMTags) GetJoinForeignKey() string {
	if x != nil && x.JoinForeignKey != nil {
		return *x.JoinForeignKey
	}
	return ""
}

func (x *ORMTags) GetJoinReferences() string {
	if x != nil && x.JoinReferences != nil {
		return *x.JoinReferences
	}
	return ""
}

func (x *ORMTags) GetConstraint() string {
	if x != nil && x.Constraint != nil {
		return *x.Constraint
	}
	return ""
}

var file_orm_orm_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1171,
		Name:          "orm.enable",
		Tag:           "varint,1171,opt,name=enable",
		Filename:      "orm/orm.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1172,
		Name:          "orm.table_name",
		Tag:           "bytes,1172,opt,name=table_name",
		Filename:      "orm/orm.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: ([]*IndexClause)(nil),
		Field:         1173,
		Name:          "orm.index_clauses",
		Tag:           "bytes,1173,rep,name=index_clauses",
		Filename:      "orm/orm.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ORMTags)(nil),
		Field:         1171,
		Name:          "orm.tags",
		Tag:           "bytes,1171,opt,name=tags",
		Filename:      "orm/orm.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// option (orm.enable) = true;
	//
	// optional bool enable = 1171;
	E_Enable = &file_orm_orm_proto_extTypes[0]
	// option (orm.table_name) = "my_table_name";
	//
	// optional string table_name = 1172;
	E_TableName = &file_orm_orm_proto_extTypes[1]
	// repeated orm.IndexClause index_clauses = 1173;
	E_IndexClauses = &file_orm_orm_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional orm.ORMTags tags = 1171;
	E_Tags = &file_orm_orm_proto_extTypes[3]
)

var File_orm_orm_proto protoreflect.FileDescriptor

var file_orm_orm_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6f, 0x72, 0x6d, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x66, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x46, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x66, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x73, 0x22, 0xdd, 0x0f, 0x0a, 0x07, 0x4f, 0x52, 0x4d, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x07, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08,
	0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x08,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0b, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4b, 0x69,
	0x6e, 0x64, 0x48, 0x0d, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x0e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x05, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x72, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x08, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x52, 0x77, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x11, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x09, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x13, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x18, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x79,
	0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52,
	0x0b, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0f, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x10, 0x70, 0x6f,
	0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1f, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61, 0x6e, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x6a, 0x6f,
	0x69, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0e, 0x6a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x22, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x77, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f,
	0x72, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61, 0x6e, 0x79, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x2a, 0x2d, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52,
	0x45, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x4e,
	0x49, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4e, 0x4f, 0x10, 0x03, 0x3a, 0x3b, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x93, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x42, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x94, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x57,
	0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x95, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x3a, 0x43, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x93,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x6d, 0x2e, 0x4f, 0x52, 0x4d, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x32, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6c, 0x34, 0x34, 0x34,
	0x2f, 0x67, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x72, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orm_orm_proto_rawDescOnce sync.Once
	file_orm_orm_proto_rawDescData = file_orm_orm_proto_rawDesc
)

func file_orm_orm_proto_rawDescGZIP() []byte {
	file_orm_orm_proto_rawDescOnce.Do(func() {
		file_orm_orm_proto_rawDescData = protoimpl.X.CompressGZIP(file_orm_orm_proto_rawDescData)
	})
	return file_orm_orm_proto_rawDescData
}

var file_orm_orm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_orm_orm_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_orm_orm_proto_goTypes = []interface{}{
	(IndexOpKind)(0),                    // 0: orm.IndexOpKind
	(IndexForKind)(0),                   // 1: orm.IndexForKind
	(TimestampKind)(0),                  // 2: orm.TimestampKind
	(*IndexClause)(nil),                 // 3: orm.IndexClause
	(*ORMTags)(nil),                     // 4: orm.ORMTags
	(*descriptorpb.MessageOptions)(nil), // 5: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 6: google.protobuf.FieldOptions
}
var file_orm_orm_proto_depIdxs = []int32{
	0,  // 0: orm.IndexClause.op:type_name -> orm.IndexOpKind
	1,  // 1: orm.IndexClause.for:type_name -> orm.IndexForKind
	2,  // 2: orm.ORMTags.auto_create_time:type_name -> orm.TimestampKind
	2,  // 3: orm.ORMTags.auto_update_time:type_name -> orm.TimestampKind
	5,  // 4: orm.enable:extendee -> google.protobuf.MessageOptions
	5,  // 5: orm.table_name:extendee -> google.protobuf.MessageOptions
	5,  // 6: orm.index_clauses:extendee -> google.protobuf.MessageOptions
	6,  // 7: orm.tags:extendee -> google.protobuf.FieldOptions
	3,  // 8: orm.index_clauses:type_name -> orm.IndexClause
	4,  // 9: orm.tags:type_name -> orm.ORMTags
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	8,  // [8:10] is the sub-list for extension type_name
	4,  // [4:8] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_orm_orm_proto_init() }
func file_orm_orm_proto_init() {
	if File_orm_orm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_orm_orm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orm_orm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_orm_orm_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orm_orm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_orm_orm_proto_goTypes,
		DependencyIndexes: file_orm_orm_proto_depIdxs,
		EnumInfos:         file_orm_orm_proto_enumTypes,
		MessageInfos:      file_orm_orm_proto_msgTypes,
		ExtensionInfos:    file_orm_orm_proto_extTypes,
	}.Build()
	File_orm_orm_proto = out.File
	file_orm_orm_proto_rawDesc = nil
	file_orm_orm_proto_goTypes = nil
	file_orm_orm_proto_depIdxs = nil
}
