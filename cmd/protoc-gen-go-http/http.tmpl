{{$svrType := .ServiceType}}
{{$svrName := .ServiceName}}

{{- range .MethodSets}}
const Operation{{$svrType}}{{.OriginalName}} = "/{{$svrName}}/{{.OriginalName}}"
{{- end}}

type {{.ServiceType}}HTTPServer interface {
{{- range .MethodSets}}
	{{- if ne .Comment ""}}
	{{.Comment}}
	{{- end}}
	{{.Name}}(context.Context, *{{.Input}}) (*{{.Output}}, error)
{{- end}}
}

func Register{{.ServiceType}}HTTPServer(s *httpx.Server, srv {{.ServiceType}}HTTPServer) {
	r := s.GetRouter()
	{{- range .Methods}}
	r.{{.Method}}("{{.Path}}", {{$svrType}}_{{.Name}}{{.Num}}_HTTP_Handler(srv, s.Middlewares()...))
	{{- end}}
}

{{range .Methods}}
func {{$svrType}}_{{.Name}}{{.Num}}_HTTP_Handler(srv {{$svrType}}HTTPServer, mws ...middleware.Middleware) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var in {{.Input}}
        ctx := httpx.NewCtx(w, r)
		{{- if and .HasBody (eq .ReqBodyToField "") }}
		if err := ctx.Bind(&in{{.Body}}); err != nil {
			ctx.ReturnError(err)
			return 
		}
		{{- end}}
		if err := ctx.BindQuery(&in); err != nil {
			ctx.ReturnError(err)
			return
		}
		{{- if .HasVars}}
		if err := ctx.BindVars(&in); err != nil {
			ctx.ReturnError(err)
			return
		}
		{{- end}}
        httpx.SetOperation(ctx,Operation{{$svrType}}{{.OriginalName}})
		handler := middleware.Chain(mws...)(func(ctx context.Context, req interface{}) (interface{}, error) {
            return srv.{{.Name}}(ctx, req.(*{{ .Input }}))
        })
        {{ if not .HasPluck }}
            {{- if .ResponseBody }}
        out, err := handler(ctx, &in)
		if err != nil {
			ctx.ReturnError(err)
			return
		}
		if err = ctx.Returns(out.(*{{ .Output }}){{.ResponseBody}}, err); err != nil {
			ctx.ReturnError(err)
		}
            {{- else}}
		if err := ctx.Returns(handler(ctx, &in)); err != nil {
		   	ctx.ReturnError(err)
		}
            {{- end}}
        {{- else }}
{{/*        if disPluck := r.Header.Get(pluck.DisablePluckHeader); disPluck != "" {*/}}
{{/*            {{- if or (ne .HasBody true) (ne .ReqBodyToField "") }}*/}}
{{/*            if err := ctx.Bind(&in{{.Body}}); err != nil {*/}}
{{/*	            ctx.ReturnError(err)*/}}
{{/*	            return*/}}
{{/*            }*/}}
{{/*            {{- end}}*/}}
{{/*		    if err := ctx.Returns(handler(ctx, &in)); err != nil {*/}}
{{/*		    	ctx.ReturnError(err)*/}}
{{/*		    }*/}}
{{/*            return*/}}
{{/*        }*/}}

            {{- if .ReqHeadersToField }}
        pluck.ExtractHeader(r.Header, &in.{{ .ReqHeadersToField }})
            {{- end }}
            {{- if .ReqBodyToField }}
        data, err := pluck.CopyBodyFromRequest(r)
		if err != nil {
			ctx.ReturnError(err)
			return
		}
        in.{{ .ReqBodyToField }} = data
            {{- end }}

            {{- if and (eq .FieldToRspHeaders "") (eq .FieldToRspBody "") }}
		if err := ctx.Returns(handler(ctx, &in)); err != nil {
			ctx.ReturnError(err)
		}
            {{- else }}
        out, err := handler(ctx, &in)
		if err != nil {
			ctx.ReturnError(err)
			return
		}
                {{- if .RspHeaders }}
                {{- range $k, $v := .RspHeaders }}
        w.Header().Set("{{$k}}", "{{$v}}")
                {{- end}}
                {{- end }}
                {{- if .FieldToRspHeaders }}
        err = pluck.SetResponseHeaders(w, out.(*{{ .Output }}).{{ .FieldToRspHeaders }})
		if err != nil {
			ctx.ReturnError(err)
			return
		}
                {{- end }}
                {{- if or .FieldToRspBody }}
		w.Write(out.(*{{ .Output }}).{{ .FieldToRspBody }})
                {{- else if or .ResponseBody }}
		w.Write(out.(*{{ .Output }}){{ .ResponseBody }})
                {{- else }}
		if err = ctx.Returns(out, err); err != nil {
			ctx.ReturnError(err)
		}
                {{- end }}
            {{- end }}
        {{- end }}
        return
	}
}
{{end}}

type {{.ServiceType}}HTTPClient interface {
{{- range .MethodSets}}
	{{.Name}}(ctx context.Context, req *{{.Input}}, opts ...httpx.CallOption) (rsp *{{.Output}}, err error)
{{- end}}
}

type {{.ServiceType}}HTTPClientImpl struct{
	cc *httpx.Client
}

func New{{.ServiceType}}HTTPClient (client *httpx.Client) {{.ServiceType}}HTTPClient {
	return &{{.ServiceType}}HTTPClientImpl{client}
}

{{range .MethodSets}}
func (c *{{$svrType}}HTTPClientImpl) {{.Name}}(ctx context.Context, in *{{.Input}}, opts ...httpx.CallOption) (*{{.Output}}, error) {
	var err error
	var out {{.Output}}
	pattern := "{{.Path}}"
	path := httpx.EncodeURL(pattern, in, {{not .HasBody}})
	opts = append(opts, httpx.Operation(Operation{{$svrType}}{{.OriginalName}}))
	opts = append(opts, httpx.PathTemplate(pattern))
{{- if and .HasPluck (ne .ReqHeadersToField "")}}
	headers, err := pluck.ConvertAnyToHeader(in.{{.ReqHeadersToField}}, {{.BodyIsBytes}})
	if err != nil {
		return nil, err
	}
	opts = append(opts, httpx.RequestHeader(headers))
{{/*	opts = append(opts, httpx.RequestHeader(http.Header{*/}}
{{/*        // pluck.DisablePluckHeader: []string{Operation{{$svrType}}{{.OriginalName}}},*/}}
{{/*    }))*/}}
{{- end }}
{{- if .ReqHeaders }}
	{{- range $k, $v := .ReqHeaders }}
	opts = append(opts, httpx.AddRequestHeader("{{$k}}", "{{$v}}"))
	{{- end}}
{{- end }}
{{- if .FieldToRspHeaders }}
	opts = append(opts, httpx.OnResponse(func(rsp *http.Response) error {
		return pluck.ExtractHeader(rsp.Header, out.{{.FieldToRspHeaders}})
	}))
{{- end }}

{{- if .ReqBodyToField }}
	err = c.cc.Invoke(ctx, "{{.Method}}", path, in.{{.ReqBodyToField}}, &out{{.ResponseBody}}, opts...)
{{- else if .HasBody }}
	err = c.cc.Invoke(ctx, "{{.Method}}", path, in{{.Body}}, &out{{.ResponseBody}}, opts...)
{{- else }}
	err = c.cc.Invoke(ctx, "{{.Method}}", path, nil, &out{{.ResponseBody}}, opts...)
{{- end }}
	if err != nil {
		return nil, err
	}
	return &out, err
}
{{end}}
