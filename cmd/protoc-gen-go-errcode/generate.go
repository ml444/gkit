package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	"github.com/ml444/gkit/cmd/protoc-gen-go-errcode/errcode"
)

const release = "v1.0.0"
const deprecationComment = "// Deprecated: Do not use."

//go:embed errcode.tmpl
var errcodeTemplate string

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func genFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_errcode.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-errcode. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-go-errcode %s", release))
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	genContent(file, g)
	return g
}

func genContent(file *protogen.File, g *protogen.GeneratedFile) {
	tmpl, err := template.New("errcode").Parse(strings.TrimSpace(errcodeTemplate))
	if err != nil {
		panic(err.Error())
	}
	for _, enum := range file.Enums {
		genErrcode(tmpl, g, enum)
	}
}

type ErrDesc struct {
	EnumName string
	Fields   []ErrField
}
type ErrField struct {
	Name     string
	Value    int32
	Status   int32
	Message  string
	Polyglot map[string]string
}

func genErrcode(tmpl *template.Template, g *protogen.GeneratedFile, enum *protogen.Enum) {
	if enum.Desc.Options().(*descriptorpb.EnumOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	ed := &ErrDesc{
		EnumName: enum.GoIdent.GoName,
		Fields:   make([]ErrField, 0),
	}
	for _, enumValue := range enum.Values {
		errDetail, ok := proto.GetExtension(enumValue.Desc.Options(), errcode.E_Detail).(*errcode.ErrDetail)
		if ok && errDetail != nil {
			fieldName := enumValue.GoIdent.GoName
			fieldName = strings.TrimPrefix(fieldName, enum.GoIdent.GoName+"_")
			m := make(map[string]string)
			for _, polyglot := range errDetail.Polyglot {
				kv := strings.SplitN(polyglot, "=", 2)
				if len(kv) == 2 {
					m[kv[0]] = kv[1]
				}
			}
			ed.Fields = append(ed.Fields, ErrField{
				Name:     fieldName,
				Value:    int32(enumValue.Desc.Number()),
				Status:   statusValue(errDetail.Status),
				Message:  messageValue(errDetail.Message, fieldName),
				Polyglot: m,
			})
		}
	}
	if len(ed.Fields) != 0 {
		buf := new(bytes.Buffer)
		err := tmpl.Execute(buf, ed)
		if err != nil {
			panic(err.Error())
		}
		_, err = g.Write(buf.Bytes())
		if err != nil {
			panic(err.Error())
		}
	}
}

func statusValue(statusCode *int32) int32 {
	if statusCode == nil {
		return 400
	}
	return *statusCode
}
func messageValue(message *string, defaultValue string) string {
	if message == nil {
		return defaultValue
	}
	return *message
}
