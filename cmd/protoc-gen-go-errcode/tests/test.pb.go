// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: tests/test.proto

package sms

import (
	_ "github.com/ml444/gkit/cmd/protoc-gen-go-errcode/err"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrCode int32

const (
	ErrCode_Success               ErrCode = 0
	ErrCode_ErrInvalidParam       ErrCode = 12000
	ErrCode_ErrParamRequired      ErrCode = 12001
	ErrCode_ErrNotFoundSendRecord ErrCode = 12002
	ErrCode_ErrLimitControl       ErrCode = 12003
	ErrCode_ErrNotFoundTemplate   ErrCode = 12004
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0:     "Success",
		12000: "ErrInvalidParam",
		12001: "ErrParamRequired",
		12002: "ErrNotFoundSendRecord",
		12003: "ErrLimitControl",
		12004: "ErrNotFoundTemplate",
	}
	ErrCode_value = map[string]int32{
		"Success":               0,
		"ErrInvalidParam":       12000,
		"ErrParamRequired":      12001,
		"ErrNotFoundSendRecord": 12002,
		"ErrLimitControl":       12003,
		"ErrNotFoundTemplate":   12004,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_test_proto_enumTypes[0].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_tests_test_proto_enumTypes[0]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{0}
}

type ErrCode2 int32

const (
	ErrCode2_SuccessMsg              ErrCode2 = 0
	ErrCode2_ErrWrongVerifyCode      ErrCode2 = 12005
	ErrCode2_ErrSendDailyLimit       ErrCode2 = 12006
	ErrCode2_ErrSendInterval         ErrCode2 = 12007
	ErrCode2_ErrInvalidPhone         ErrCode2 = 12008
	ErrCode2_ErrSendFailed           ErrCode2 = 12009
	ErrCode2_ErrInvalidTemplateParam ErrCode2 = 12010
)

// Enum value maps for ErrCode2.
var (
	ErrCode2_name = map[int32]string{
		0:     "SuccessMsg",
		12005: "ErrWrongVerifyCode",
		12006: "ErrSendDailyLimit",
		12007: "ErrSendInterval",
		12008: "ErrInvalidPhone",
		12009: "ErrSendFailed",
		12010: "ErrInvalidTemplateParam",
	}
	ErrCode2_value = map[string]int32{
		"SuccessMsg":              0,
		"ErrWrongVerifyCode":      12005,
		"ErrSendDailyLimit":       12006,
		"ErrSendInterval":         12007,
		"ErrInvalidPhone":         12008,
		"ErrSendFailed":           12009,
		"ErrInvalidTemplateParam": 12010,
	}
)

func (x ErrCode2) Enum() *ErrCode2 {
	p := new(ErrCode2)
	*p = x
	return p
}

func (x ErrCode2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode2) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_test_proto_enumTypes[1].Descriptor()
}

func (ErrCode2) Type() protoreflect.EnumType {
	return &file_tests_test_proto_enumTypes[1]
}

func (x ErrCode2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode2.Descriptor instead.
func (ErrCode2) EnumDescriptor() ([]byte, []int) {
	return file_tests_test_proto_rawDescGZIP(), []int{1}
}

var File_tests_test_proto protoreflect.FileDescriptor

var file_tests_test_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x73, 0x6d, 0x73, 0x1a, 0x0d, 0x65, 0x72, 0x72, 0x2f, 0x65, 0x72, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xf3, 0x02, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x2a, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x10, 0xe0, 0x5d, 0x1a, 0x14, 0xe2, 0x4d, 0x11, 0x08, 0x90, 0x03, 0x12, 0x0c, 0xe9,
	0x9d, 0x9e, 0xe6, 0xb3, 0x95, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x28, 0x0a, 0x10, 0x45,
	0x72, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10,
	0xe1, 0x5d, 0x1a, 0x11, 0xe2, 0x4d, 0x0e, 0x12, 0x0c, 0xe7, 0xbc, 0xba, 0xe5, 0xa4, 0xb1, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x12, 0x3f, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0xe2,
	0x5d, 0x1a, 0x23, 0xe2, 0x4d, 0x20, 0x08, 0x94, 0x03, 0x12, 0x1b, 0xe6, 0x9c, 0xaa, 0xe6, 0x89,
	0xbe, 0xe5, 0x88, 0xb0, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1,
	0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x12, 0x39, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0xe3, 0x5d, 0x1a, 0x23, 0xe2, 0x4d,
	0x20, 0x08, 0x93, 0x03, 0x12, 0x1b, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe4, 0xba, 0x86, 0xe7,
	0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe9, 0xa2, 0x91, 0xe7, 0x8e,
	0x87, 0x12, 0x5c, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0xe4, 0x5d, 0x1a, 0x42, 0xe2, 0x4d, 0x3f,
	0x08, 0x94, 0x03, 0x12, 0x0f, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xb8, 0x8d, 0xe5, 0xad,
	0x98, 0xe5, 0x9c, 0xa8, 0x1a, 0x12, 0x7a, 0x68, 0x3d, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4,
	0xb8, 0x8d, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x1a, 0x15, 0x65, 0x6e, 0x3d, 0x6e, 0x6f, 0x74,
	0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a,
	0x2b, 0x80, 0x4b, 0xc8, 0x01, 0x88, 0x4b, 0xe0, 0x5d, 0x92, 0x4b, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x9a, 0x4b, 0x09, 0x7a, 0x68, 0x3d, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x9a,
	0x4b, 0x0a, 0x65, 0x6e, 0x3d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x9f, 0x05, 0x0a,
	0x08, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x10, 0x00, 0x12, 0x6a, 0x0a, 0x12, 0x45, 0x72, 0x72,
	0x57, 0x72, 0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10,
	0xe5, 0x5d, 0x1a, 0x51, 0xe2, 0x4d, 0x4e, 0x08, 0x93, 0x03, 0x12, 0x1b, 0xe9, 0xaa, 0x8c, 0xe8,
	0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x88, 0x96, 0xe5, 0xb7,
	0xb2, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0x1a, 0x2c, 0x65, 0x6e, 0x3d, 0x74, 0x68, 0x65, 0x20,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xe6, 0x5d, 0x1a, 0x71,
	0xe2, 0x4d, 0x6e, 0x08, 0x93, 0x03, 0x12, 0x1b, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0,
	0x81, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe8, 0xb6, 0x85,
	0xe9, 0x99, 0x90, 0x1a, 0x4c, 0x65, 0x6e, 0x3d, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x10, 0xe7, 0x5d, 0x1a, 0x73, 0xe2, 0x4d, 0x70, 0x08, 0x93, 0x03,
	0x12, 0x27, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0x8f, 0x91, 0xe9, 0x80,
	0x81, 0xe9, 0xa2, 0x91, 0xe7, 0xb9, 0x81, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xb7, 0xe7, 0xa8, 0x8d,
	0xe5, 0x90, 0x8e, 0xe5, 0x86, 0x8d, 0xe8, 0xaf, 0x95, 0x1a, 0x42, 0x65, 0x6e, 0x3d, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74, 0x72, 0x79,
	0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2e, 0x12, 0x53, 0x0a,
	0x0f, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x10, 0xe8, 0x5d, 0x1a, 0x3d, 0xe2, 0x4d, 0x3a, 0x08, 0x93, 0x03, 0x12, 0x15, 0xe9, 0x9d, 0x9e,
	0xe6, 0xb3, 0x95, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe7,
	0xa0, 0x81, 0x1a, 0x1e, 0x65, 0x6e, 0x3d, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0xe9, 0x5d, 0x1a, 0x35, 0xe2, 0x4d, 0x32, 0x08, 0x90, 0x03, 0x12, 0x12,
	0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x1a, 0x19, 0x65, 0x6e, 0x3d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x5f, 0x0a,
	0x17, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x10, 0xea, 0x5d, 0x1a, 0x41, 0xe2, 0x4d, 0x3e,
	0x08, 0x90, 0x03, 0x12, 0x18, 0xe7, 0x9f, 0xad, 0xe4, 0xbf, 0xa1, 0xe6, 0xa8, 0xa1, 0xe7, 0x89,
	0x88, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x1a, 0x1f, 0x65,
	0x6e, 0x3d, 0x73, 0x6d, 0x73, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x15,
	0x5a, 0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_test_proto_rawDescOnce sync.Once
	file_tests_test_proto_rawDescData = file_tests_test_proto_rawDesc
)

func file_tests_test_proto_rawDescGZIP() []byte {
	file_tests_test_proto_rawDescOnce.Do(func() {
		file_tests_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_test_proto_rawDescData)
	})
	return file_tests_test_proto_rawDescData
}

var file_tests_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tests_test_proto_goTypes = []interface{}{
	(ErrCode)(0),  // 0: sms.ErrCode
	(ErrCode2)(0), // 1: sms.ErrCode2
}
var file_tests_test_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tests_test_proto_init() }
func file_tests_test_proto_init() {
	if File_tests_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_test_proto_goTypes,
		DependencyIndexes: file_tests_test_proto_depIdxs,
		EnumInfos:         file_tests_test_proto_enumTypes,
	}.Build()
	File_tests_test_proto = out.File
	file_tests_test_proto_rawDesc = nil
	file_tests_test_proto_goTypes = nil
	file_tests_test_proto_depIdxs = nil
}
