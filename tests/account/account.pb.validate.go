// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelAccountMultiError, or
// nil if none found.
func (m *ModelAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for LastLoginAt

	// no validation rules for LastLoginIp

	if len(errors) > 0 {
		return ModelAccountMultiError(errors)
	}

	return nil
}

// ModelAccountMultiError is an error wrapping multiple validation errors
// returned by ModelAccount.ValidateAll() if the designated constraints aren't met.
type ModelAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelAccountMultiError) AllErrors() []error { return m }

// ModelAccountValidationError is the validation error returned by
// ModelAccount.Validate if the designated constraints aren't met.
type ModelAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelAccountValidationError) ErrorName() string { return "ModelAccountValidationError" }

// Error satisfies the builtin error interface
func (e ModelAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelAccountValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 11 || l > 13 {
		err := RegisterReqValidationError{
			field:  "Account",
			reason: "value length must be between 11 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterReq_Account_Pattern.MatchString(m.GetAccount()) {
		err := RegisterReqValidationError{
			field:  "Account",
			reason: "value does not match regex pattern \"^1\\\\d{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 500 {
		err := RegisterReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVerifyCode()); l < 4 || l > 6 {
		err := RegisterReqValidationError{
			field:  "VerifyCode",
			reason: "value length must be between 4 and 6 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickName()); l < 2 || l > 40 {
		err := RegisterReqValidationError{
			field:  "NickName",
			reason: "value length must be between 2 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CorpId

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

var _RegisterReq_Account_Pattern = regexp.MustCompile("^1\\d{10}$")

// Validate checks the field values on RegisterRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterRspMultiError, or
// nil if none found.
func (m *RegisterRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Msg

	if len(errors) > 0 {
		return RegisterRspMultiError(errors)
	}

	return nil
}

// RegisterRspMultiError is an error wrapping multiple validation errors
// returned by RegisterRsp.ValidateAll() if the designated constraints aren't met.
type RegisterRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRspMultiError) AllErrors() []error { return m }

// RegisterRspValidationError is the validation error returned by
// RegisterRsp.Validate if the designated constraints aren't met.
type RegisterRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRspValidationError) ErrorName() string { return "RegisterRspValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRspValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 6 || l > 20 {
		err := LoginReqValidationError{
			field:  "Account",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRspMultiError, or nil
// if none found.
func (m *LoginRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for LoginToken

	for idx, item := range m.GetCorpInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoginRspValidationError{
						field:  fmt.Sprintf("CorpInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoginRspValidationError{
						field:  fmt.Sprintf("CorpInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginRspValidationError{
					field:  fmt.Sprintf("CorpInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return LoginRspMultiError(errors)
	}

	return nil
}

// LoginRspMultiError is an error wrapping multiple validation errors returned
// by LoginRsp.ValidateAll() if the designated constraints aren't met.
type LoginRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRspMultiError) AllErrors() []error { return m }

// LoginRspValidationError is the validation error returned by
// LoginRsp.Validate if the designated constraints aren't met.
type LoginRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRspValidationError) ErrorName() string { return "LoginRspValidationError" }

// Error satisfies the builtin error interface
func (e LoginRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRspValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccount()) < 6 {
		err := LogoutReqValidationError{
			field:  "Account",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRspMultiError, or nil
// if none found.
func (m *LogoutRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRspMultiError(errors)
	}

	return nil
}

// LogoutRspMultiError is an error wrapping multiple validation errors returned
// by LogoutRsp.ValidateAll() if the designated constraints aren't met.
type LogoutRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRspMultiError) AllErrors() []error { return m }

// LogoutRspValidationError is the validation error returned by
// LogoutRsp.Validate if the designated constraints aren't met.
type LogoutRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRspValidationError) ErrorName() string { return "LogoutRspValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRspValidationError{}

// Validate checks the field values on TokenReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenReqMultiError, or nil
// if none found.
func (m *TokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CorpId

	// no validation rules for LoginToken

	if len(errors) > 0 {
		return TokenReqMultiError(errors)
	}

	return nil
}

// TokenReqMultiError is an error wrapping multiple validation errors returned
// by TokenReq.ValidateAll() if the designated constraints aren't met.
type TokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenReqMultiError) AllErrors() []error { return m }

// TokenReqValidationError is the validation error returned by
// TokenReq.Validate if the designated constraints aren't met.
type TokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenReqValidationError) ErrorName() string { return "TokenReqValidationError" }

// Error satisfies the builtin error interface
func (e TokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenReqValidationError{}

// Validate checks the field values on TokenRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRspMultiError, or nil
// if none found.
func (m *TokenRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return TokenRspMultiError(errors)
	}

	return nil
}

// TokenRspMultiError is an error wrapping multiple validation errors returned
// by TokenRsp.ValidateAll() if the designated constraints aren't met.
type TokenRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRspMultiError) AllErrors() []error { return m }

// TokenRspValidationError is the validation error returned by
// TokenRsp.Validate if the designated constraints aren't met.
type TokenRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRspValidationError) ErrorName() string { return "TokenRspValidationError" }

// Error satisfies the builtin error interface
func (e TokenRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRspValidationError{}

// Validate checks the field values on RefreshReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshReqMultiError, or
// nil if none found.
func (m *RefreshReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRefreshToken()) < 10 {
		err := RefreshReqValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshReqMultiError(errors)
	}

	return nil
}

// RefreshReqMultiError is an error wrapping multiple validation errors
// returned by RefreshReq.ValidateAll() if the designated constraints aren't met.
type RefreshReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshReqMultiError) AllErrors() []error { return m }

// RefreshReqValidationError is the validation error returned by
// RefreshReq.Validate if the designated constraints aren't met.
type RefreshReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshReqValidationError) ErrorName() string { return "RefreshReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshReqValidationError{}

// Validate checks the field values on RefreshRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshRspMultiError, or
// nil if none found.
func (m *RefreshRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshRspMultiError(errors)
	}

	return nil
}

// RefreshRspMultiError is an error wrapping multiple validation errors
// returned by RefreshRsp.ValidateAll() if the designated constraints aren't met.
type RefreshRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshRspMultiError) AllErrors() []error { return m }

// RefreshRspValidationError is the validation error returned by
// RefreshRsp.Validate if the designated constraints aren't met.
type RefreshRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshRspValidationError) ErrorName() string { return "RefreshRspValidationError" }

// Error satisfies the builtin error interface
func (e RefreshRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshRspValidationError{}

// Validate checks the field values on VerifyCodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyCodeReqMultiError, or
// nil if none found.
func (m *VerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 11 || l > 13 {
		err := VerifyCodeReqValidationError{
			field:  "Phone",
			reason: "value length must be between 11 and 13 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_VerifyCodeReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := VerifyCodeReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1\\\\d{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VerifyType

	if len(errors) > 0 {
		return VerifyCodeReqMultiError(errors)
	}

	return nil
}

// VerifyCodeReqMultiError is an error wrapping multiple validation errors
// returned by VerifyCodeReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCodeReqMultiError) AllErrors() []error { return m }

// VerifyCodeReqValidationError is the validation error returned by
// VerifyCodeReq.Validate if the designated constraints aren't met.
type VerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCodeReqValidationError) ErrorName() string { return "VerifyCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCodeReqValidationError{}

var _VerifyCodeReq_Phone_Pattern = regexp.MustCompile("^1\\d{10}$")

// Validate checks the field values on VerifyCodeRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyCodeRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCodeRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyCodeRspMultiError, or
// nil if none found.
func (m *VerifyCodeRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCodeRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyCodeRspMultiError(errors)
	}

	return nil
}

// VerifyCodeRspMultiError is an error wrapping multiple validation errors
// returned by VerifyCodeRsp.ValidateAll() if the designated constraints
// aren't met.
type VerifyCodeRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCodeRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCodeRspMultiError) AllErrors() []error { return m }

// VerifyCodeRspValidationError is the validation error returned by
// VerifyCodeRsp.Validate if the designated constraints aren't met.
type VerifyCodeRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCodeRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCodeRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCodeRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCodeRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCodeRspValidationError) ErrorName() string { return "VerifyCodeRspValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCodeRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCodeRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCodeRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCodeRspValidationError{}

// Validate checks the field values on GetPublicKeyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPublicKeyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicKeyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicKeyReqMultiError, or nil if none found.
func (m *GetPublicKeyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicKeyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPublicKeyReqMultiError(errors)
	}

	return nil
}

// GetPublicKeyReqMultiError is an error wrapping multiple validation errors
// returned by GetPublicKeyReq.ValidateAll() if the designated constraints
// aren't met.
type GetPublicKeyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicKeyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicKeyReqMultiError) AllErrors() []error { return m }

// GetPublicKeyReqValidationError is the validation error returned by
// GetPublicKeyReq.Validate if the designated constraints aren't met.
type GetPublicKeyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicKeyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicKeyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicKeyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicKeyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicKeyReqValidationError) ErrorName() string { return "GetPublicKeyReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPublicKeyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicKeyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicKeyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicKeyReqValidationError{}

// Validate checks the field values on GetPublicKeyRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPublicKeyRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicKeyRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicKeyRspMultiError, or nil if none found.
func (m *GetPublicKeyRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicKeyRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return GetPublicKeyRspMultiError(errors)
	}

	return nil
}

// GetPublicKeyRspMultiError is an error wrapping multiple validation errors
// returned by GetPublicKeyRsp.ValidateAll() if the designated constraints
// aren't met.
type GetPublicKeyRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicKeyRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicKeyRspMultiError) AllErrors() []error { return m }

// GetPublicKeyRspValidationError is the validation error returned by
// GetPublicKeyRsp.Validate if the designated constraints aren't met.
type GetPublicKeyRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicKeyRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicKeyRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicKeyRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicKeyRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicKeyRspValidationError) ErrorName() string { return "GetPublicKeyRspValidationError" }

// Error satisfies the builtin error interface
func (e GetPublicKeyRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicKeyRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicKeyRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicKeyRspValidationError{}

// Validate checks the field values on ResetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReqMultiError, or nil if none found.
func (m *ResetPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for VerifyCode

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 500 {
		err := ResetPasswordReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordReqMultiError(errors)
	}

	return nil
}

// ResetPasswordReqMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReqMultiError) AllErrors() []error { return m }

// ResetPasswordReqValidationError is the validation error returned by
// ResetPasswordReq.Validate if the designated constraints aren't met.
type ResetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReqValidationError) ErrorName() string { return "ResetPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReqValidationError{}

// Validate checks the field values on ResetPasswordRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRspMultiError, or nil if none found.
func (m *ResetPasswordRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Msg

	if len(errors) > 0 {
		return ResetPasswordRspMultiError(errors)
	}

	return nil
}

// ResetPasswordRspMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordRsp.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRspMultiError) AllErrors() []error { return m }

// ResetPasswordRspValidationError is the validation error returned by
// ResetPasswordRsp.Validate if the designated constraints aren't met.
type ResetPasswordRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRspValidationError) ErrorName() string { return "ResetPasswordRspValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRspValidationError{}

// Validate checks the field values on GetAccountInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoReqMultiError, or nil if none found.
func (m *GetAccountInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	if len(errors) > 0 {
		return GetAccountInfoReqMultiError(errors)
	}

	return nil
}

// GetAccountInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetAccountInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccountInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoReqMultiError) AllErrors() []error { return m }

// GetAccountInfoReqValidationError is the validation error returned by
// GetAccountInfoReq.Validate if the designated constraints aren't met.
type GetAccountInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoReqValidationError) ErrorName() string {
	return "GetAccountInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoReqValidationError{}

// Validate checks the field values on GetAccountInfoRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoRspMultiError, or nil if none found.
func (m *GetAccountInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountInfoRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountInfoRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountInfoRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountInfoRspMultiError(errors)
	}

	return nil
}

// GetAccountInfoRspMultiError is an error wrapping multiple validation errors
// returned by GetAccountInfoRsp.ValidateAll() if the designated constraints
// aren't met.
type GetAccountInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoRspMultiError) AllErrors() []error { return m }

// GetAccountInfoRspValidationError is the validation error returned by
// GetAccountInfoRsp.Validate if the designated constraints aren't met.
type GetAccountInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoRspValidationError) ErrorName() string {
	return "GetAccountInfoRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoRspValidationError{}

// Validate checks the field values on ListAccountReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccountReqMultiError,
// or nil if none found.
func (m *ListAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Account

	if len(errors) > 0 {
		return ListAccountReqMultiError(errors)
	}

	return nil
}

// ListAccountReqMultiError is an error wrapping multiple validation errors
// returned by ListAccountReq.ValidateAll() if the designated constraints
// aren't met.
type ListAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountReqMultiError) AllErrors() []error { return m }

// ListAccountReqValidationError is the validation error returned by
// ListAccountReq.Validate if the designated constraints aren't met.
type ListAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountReqValidationError) ErrorName() string { return "ListAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountReqValidationError{}

// Validate checks the field values on ListAccountRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccountRspMultiError,
// or nil if none found.
func (m *ListAccountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccountRspMultiError(errors)
	}

	return nil
}

// ListAccountRspMultiError is an error wrapping multiple validation errors
// returned by ListAccountRsp.ValidateAll() if the designated constraints
// aren't met.
type ListAccountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountRspMultiError) AllErrors() []error { return m }

// ListAccountRspValidationError is the validation error returned by
// ListAccountRsp.Validate if the designated constraints aren't met.
type ListAccountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountRspValidationError) ErrorName() string { return "ListAccountRspValidationError" }

// Error satisfies the builtin error interface
func (e ListAccountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountRspValidationError{}

// Validate checks the field values on CreateAccountSysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountSysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountSysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountSysReqMultiError, or nil if none found.
func (m *CreateAccountSysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountSysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateAccountSysReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAccount()); l < 6 || l > 20 {
		err := CreateAccountSysReqValidationError{
			field:  "Account",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 500 {
		err := CreateAccountSysReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCorpId() <= 0 {
		err := CreateAccountSysReqValidationError{
			field:  "CorpId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAccountSysReqMultiError(errors)
	}

	return nil
}

// CreateAccountSysReqMultiError is an error wrapping multiple validation
// errors returned by CreateAccountSysReq.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountSysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountSysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountSysReqMultiError) AllErrors() []error { return m }

// CreateAccountSysReqValidationError is the validation error returned by
// CreateAccountSysReq.Validate if the designated constraints aren't met.
type CreateAccountSysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountSysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountSysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountSysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountSysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountSysReqValidationError) ErrorName() string {
	return "CreateAccountSysReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountSysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountSysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountSysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountSysReqValidationError{}

// Validate checks the field values on CreateAccountSysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountSysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountSysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountSysRspMultiError, or nil if none found.
func (m *CreateAccountSysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountSysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAccountSysRspMultiError(errors)
	}

	return nil
}

// CreateAccountSysRspMultiError is an error wrapping multiple validation
// errors returned by CreateAccountSysRsp.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountSysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountSysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountSysRspMultiError) AllErrors() []error { return m }

// CreateAccountSysRspValidationError is the validation error returned by
// CreateAccountSysRsp.Validate if the designated constraints aren't met.
type CreateAccountSysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountSysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountSysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountSysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountSysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountSysRspValidationError) ErrorName() string {
	return "CreateAccountSysRspValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountSysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountSysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountSysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountSysRspValidationError{}

// Validate checks the field values on DecryptPwdSysReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecryptPwdSysReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecryptPwdSysReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecryptPwdSysReqMultiError, or nil if none found.
func (m *DecryptPwdSysReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DecryptPwdSysReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return DecryptPwdSysReqMultiError(errors)
	}

	return nil
}

// DecryptPwdSysReqMultiError is an error wrapping multiple validation errors
// returned by DecryptPwdSysReq.ValidateAll() if the designated constraints
// aren't met.
type DecryptPwdSysReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecryptPwdSysReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecryptPwdSysReqMultiError) AllErrors() []error { return m }

// DecryptPwdSysReqValidationError is the validation error returned by
// DecryptPwdSysReq.Validate if the designated constraints aren't met.
type DecryptPwdSysReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptPwdSysReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptPwdSysReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptPwdSysReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptPwdSysReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptPwdSysReqValidationError) ErrorName() string { return "DecryptPwdSysReqValidationError" }

// Error satisfies the builtin error interface
func (e DecryptPwdSysReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptPwdSysReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptPwdSysReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptPwdSysReqValidationError{}

// Validate checks the field values on DecryptPwdSysRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecryptPwdSysRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecryptPwdSysRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecryptPwdSysRspMultiError, or nil if none found.
func (m *DecryptPwdSysRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DecryptPwdSysRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaintextPwd

	if len(errors) > 0 {
		return DecryptPwdSysRspMultiError(errors)
	}

	return nil
}

// DecryptPwdSysRspMultiError is an error wrapping multiple validation errors
// returned by DecryptPwdSysRsp.ValidateAll() if the designated constraints
// aren't met.
type DecryptPwdSysRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecryptPwdSysRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecryptPwdSysRspMultiError) AllErrors() []error { return m }

// DecryptPwdSysRspValidationError is the validation error returned by
// DecryptPwdSysRsp.Validate if the designated constraints aren't met.
type DecryptPwdSysRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptPwdSysRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptPwdSysRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptPwdSysRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptPwdSysRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptPwdSysRspValidationError) ErrorName() string { return "DecryptPwdSysRspValidationError" }

// Error satisfies the builtin error interface
func (e DecryptPwdSysRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptPwdSysRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptPwdSysRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptPwdSysRspValidationError{}

// Validate checks the field values on LoginRsp_CorpInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginRsp_CorpInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRsp_CorpInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginRsp_CorpInfoMultiError, or nil if none found.
func (m *LoginRsp_CorpInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRsp_CorpInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Fullname

	// no validation rules for Logo

	// no validation rules for Status

	if len(errors) > 0 {
		return LoginRsp_CorpInfoMultiError(errors)
	}

	return nil
}

// LoginRsp_CorpInfoMultiError is an error wrapping multiple validation errors
// returned by LoginRsp_CorpInfo.ValidateAll() if the designated constraints
// aren't met.
type LoginRsp_CorpInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRsp_CorpInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRsp_CorpInfoMultiError) AllErrors() []error { return m }

// LoginRsp_CorpInfoValidationError is the validation error returned by
// LoginRsp_CorpInfo.Validate if the designated constraints aren't met.
type LoginRsp_CorpInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRsp_CorpInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRsp_CorpInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRsp_CorpInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRsp_CorpInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRsp_CorpInfoValidationError) ErrorName() string {
	return "LoginRsp_CorpInfoValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRsp_CorpInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRsp_CorpInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRsp_CorpInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRsp_CorpInfoValidationError{}
