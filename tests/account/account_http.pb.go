// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v1.0.0
// - protoc             v3.21.5
// source: account.proto

package account

import (
	context "context"

	"github.com/ml444/gkit/middleware"
	"github.com/ml444/gkit/transport"
	"github.com/ml444/gkit/transport/httpx"
)

var _ = new(context.Context)
var _ = httpx.EncodeURL

const OperationAccountGetAccountInfo = "/account.account/GetAccountInfo"
const OperationAccountGetPublicKey = "/account.account/GetPublicKey"
const OperationAccountListAccount = "/account.account/ListAccount"
const OperationAccountLogin = "/account.account/Login"
const OperationAccountLogout = "/account.account/Logout"
const OperationAccountRefresh = "/account.account/Refresh"
const OperationAccountRegister = "/account.account/Register"
const OperationAccountResetPassword = "/account.account/ResetPassword"
const OperationAccountToken = "/account.account/Token"
const OperationAccountVerifyCode = "/account.account/VerifyCode"

type AccountHTTPServer interface {
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoRsp, error)
	// GetPublicKey @desc: 获取公钥
	GetPublicKey(context.Context, *GetPublicKeyReq) (*GetPublicKeyRsp, error)
	ListAccount(context.Context, *ListAccountReq) (*ListAccountRsp, error)
	// Login @desc: 登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// Logout @desc: 登出
	Logout(context.Context, *LogoutReq) (*LogoutRsp, error)
	// Refresh @desc: 刷新Token
	Refresh(context.Context, *RefreshReq) (*RefreshRsp, error)
	// Register @error:
	// @freq: ip,60,100
	Register(context.Context, *RegisterReq) (*RegisterRsp, error)
	// ResetPassword @desc: 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRsp, error)
	// Token @desc: 获取Token
	Token(context.Context, *TokenReq) (*TokenRsp, error)
	// VerifyCode @desc: 发送验证码
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeRsp, error)
}

func RegisterAccountHTTPServer(s *httpx.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/account/Register", _Account_Register0_HTTP_Handler(srv, s.Middlewares()...))
	r.POST("/account/Login", _Account_Login0_HTTP_Handler(srv))
	r.POST("/account/Logout", _Account_Logout0_HTTP_Handler(srv))
	r.POST("/account/Token", _Account_Token0_HTTP_Handler(srv))
	r.POST("/account/Refresh", _Account_Refresh0_HTTP_Handler(srv))
	r.POST("/account/VerifyCode", _Account_VerifyCode0_HTTP_Handler(srv))
	r.GET("/account/GetPublicKey", _Account_GetPublicKey0_HTTP_Handler(srv))
	r.POST("/account/ResetPassword", _Account_ResetPassword0_HTTP_Handler(srv))
	r.GET("/account/GetAccountInfo/{account}", _Account_GetAccountInfo0_HTTP_Handler(srv))
	r.GET("/account/ListAccount", _Account_ListAccount0_HTTP_Handler(srv))
}

func _Account_Register0_HTTP_Handler(srv AccountHTTPServer, mws ...middleware.Middleware) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountRegister)
		handler := middleware.Chain(mws...)(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		reply, err := handler(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_Login0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountLogin)
		reply, err := srv.Login(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_Logout0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountLogout)
		reply, err := srv.Logout(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_Token0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in TokenReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountToken)
		reply, err := srv.Token(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_Refresh0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in RefreshReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountRefresh)
		reply, err := srv.Refresh(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_VerifyCode0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in VerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountVerifyCode)
		reply, err := srv.VerifyCode(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_GetPublicKey0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in GetPublicKeyReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountGetPublicKey)
		reply, err := srv.GetPublicKey(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_ResetPassword0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in ResetPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountResetPassword)
		reply, err := srv.ResetPassword(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccountInfo0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in GetAccountInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountGetAccountInfo)
		reply, err := srv.GetAccountInfo(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Account_ListAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx httpx.Context) error {
	return func(ctx httpx.Context) error {
		var in ListAccountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		transport.SetOperation(ctx, OperationAccountListAccount)
		reply, err := srv.ListAccount(ctx, &in)
		if err != nil {
			return err
		}
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	GetAccountInfo(ctx context.Context, req *GetAccountInfoReq, opts ...httpx.CallOption) (rsp *GetAccountInfoRsp, err error)
	GetPublicKey(ctx context.Context, req *GetPublicKeyReq, opts ...httpx.CallOption) (rsp *GetPublicKeyRsp, err error)
	ListAccount(ctx context.Context, req *ListAccountReq, opts ...httpx.CallOption) (rsp *ListAccountRsp, err error)
	Login(ctx context.Context, req *LoginReq, opts ...httpx.CallOption) (rsp *LoginRsp, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...httpx.CallOption) (rsp *LogoutRsp, err error)
	Refresh(ctx context.Context, req *RefreshReq, opts ...httpx.CallOption) (rsp *RefreshRsp, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...httpx.CallOption) (rsp *RegisterRsp, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordReq, opts ...httpx.CallOption) (rsp *ResetPasswordRsp, err error)
	Token(ctx context.Context, req *TokenReq, opts ...httpx.CallOption) (rsp *TokenRsp, err error)
	VerifyCode(ctx context.Context, req *VerifyCodeReq, opts ...httpx.CallOption) (rsp *VerifyCodeRsp, err error)
}

type AccountHTTPClientImpl struct {
	cc *httpx.Client
}

func NewAccountHTTPClient(client *httpx.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...httpx.CallOption) (*GetAccountInfoRsp, error) {
	var out GetAccountInfoRsp
	pattern := "/account/GetAccountInfo/{account}"
	path := httpx.EncodeURL(pattern, in, true)
	opts = append(opts, httpx.Operation(OperationAccountGetAccountInfo))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...httpx.CallOption) (*GetPublicKeyRsp, error) {
	var out GetPublicKeyRsp
	pattern := "/account/GetPublicKey"
	path := httpx.EncodeURL(pattern, in, true)
	opts = append(opts, httpx.Operation(OperationAccountGetPublicKey))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ListAccount(ctx context.Context, in *ListAccountReq, opts ...httpx.CallOption) (*ListAccountRsp, error) {
	var out ListAccountRsp
	pattern := "/account/ListAccount"
	path := httpx.EncodeURL(pattern, in, true)
	opts = append(opts, httpx.Operation(OperationAccountListAccount))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...httpx.CallOption) (*LoginRsp, error) {
	var out LoginRsp
	pattern := "/account/Login"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountLogin))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...httpx.CallOption) (*LogoutRsp, error) {
	var out LogoutRsp
	pattern := "/account/Logout"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountLogout))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Refresh(ctx context.Context, in *RefreshReq, opts ...httpx.CallOption) (*RefreshRsp, error) {
	var out RefreshRsp
	pattern := "/account/Refresh"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountRefresh))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...httpx.CallOption) (*RegisterRsp, error) {
	var out RegisterRsp
	pattern := "/account/Register"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountRegister))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...httpx.CallOption) (*ResetPasswordRsp, error) {
	var out ResetPasswordRsp
	pattern := "/account/ResetPassword"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountResetPassword))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Token(ctx context.Context, in *TokenReq, opts ...httpx.CallOption) (*TokenRsp, error) {
	var out TokenRsp
	pattern := "/account/Token"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountToken))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...httpx.CallOption) (*VerifyCodeRsp, error) {
	var out VerifyCodeRsp
	pattern := "/account/VerifyCode"
	path := httpx.EncodeURL(pattern, in, false)
	opts = append(opts, httpx.Operation(OperationAccountVerifyCode))
	opts = append(opts, httpx.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
